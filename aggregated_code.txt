
--------------------------------------------------------------------------------
FILE: aggregated_code.txt
--------------------------------------------------------------------------------





--------------------------------------------------------------------------------
FILE: pom.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>automationexercise</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.release>8</maven.compiler.release>
    </properties>

    <dependencies>

        <!-- Selenium -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>4.11.0</version>
        </dependency>

        <!-- Apache POI for Excel support -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>5.2.3</version>
        </dependency>
        
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.3</version>
        </dependency>

        <!-- JSON library -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20230227</version>
        </dependency>

        <!-- TestNG -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>7.8.0</version>
            <scope>test</scope>
        </dependency>

        <!-- SLF4J API -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.7</version>
        </dependency>

        <!-- Log4j2 (Core + API + Bridge) -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.20.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.20.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j2-impl</artifactId>
            <version>2.20.0</version>
        </dependency>

        <!-- Apache Commons IO -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.12.0</version>
        </dependency>

        <!-- Apache Commons Lang -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>

        <!-- ExtentReports -->
        <dependency>
            <groupId>com.aventstack</groupId>
            <artifactId>extentreports</artifactId>
            <version>4.0.9</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <release>8</release>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>




--------------------------------------------------------------------------------
FILE: .github\workflows\maven.yml
--------------------------------------------------------------------------------

# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation..

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        architecture: x64
        distribution: 'temurin'
        cache: maven

    - uses: browser-actions/setup-chrome@latest
    - run: chrome --version
     
    - name: Build with Maven
      run: mvn -B package --file pom.xml test







--------------------------------------------------------------------------------
FILE: .idea\compiler.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="automationexcercise" />
      </profile>
    </annotationProcessing>
  </component>
</project>



--------------------------------------------------------------------------------
FILE: .idea\jarRepositories.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>



--------------------------------------------------------------------------------
FILE: .idea\misc.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>



--------------------------------------------------------------------------------
FILE: .idea\uiDesigner.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Palette2">
    <group name="Swing">
      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
      </item>
      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
      </item>
      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
        <initial-values>
          <property name="text" value="Button" />
        </initial-values>
      </item>
      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="RadioButton" />
        </initial-values>
      </item>
      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="CheckBox" />
        </initial-values>
      </item>
      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="Label" />
        </initial-values>
      </item>
      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
          <preferred-size width="200" height="200" />
        </default-constraints>
      </item>
      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
          <preferred-size width="200" height="200" />
        </default-constraints>
      </item>
      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
      </item>
      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
          <preferred-size width="-1" height="20" />
        </default-constraints>
      </item>
      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
      </item>
      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
      </item>
    </group>
  </component>
</project>



--------------------------------------------------------------------------------
FILE: src\main\resources\log4j2.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
        <File name="File" fileName="logs/automation.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n"/>
        </File>
    </Appenders>
    <Loggers>
        <Root level="info">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Root>
    </Loggers>
</Configuration>




--------------------------------------------------------------------------------
FILE: src\test\java\helper\AccountLogger.java
--------------------------------------------------------------------------------

package helper;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.*;
import java.nio.file.*;
import java.time.Instant;

public class AccountLogger {
    private static final String LOG_PATH = "./src/test/resources/created_accounts.json";

    public static void logAccount(String name, String email) {
        try {
            JSONArray accounts;

            // If file exists, load existing accounts
            File file = new File(LOG_PATH);
            if (file.exists()) {
                String content = new String(Files.readAllBytes(Paths.get(LOG_PATH)));
                accounts = new JSONArray(content);
            } else {
                accounts = new JSONArray();
            }

            JSONObject newAccount = new JSONObject();
            newAccount.put("name", name);
            newAccount.put("email", email);
            newAccount.put("createdAt", Instant.now().toString());

            accounts.put(newAccount);

            FileWriter fw = new FileWriter(LOG_PATH);
            fw.write(accounts.toString(2)); // pretty print
            fw.close();

        } catch (Exception e) {
            e.printStackTrace(); // Replace with logger if needed
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\helper\ExcelReader.java
--------------------------------------------------------------------------------

package helper;

import java.io.FileInputStream;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelReader {

    private static final String DEFAULT_PATH = "./src/test/resources/test_users_data.xlsx";

    // ✅ Returns row index of next unused record (used = false)
    public static int getNextUnusedRow(String filePath, String sheetName) throws Exception {
        FileInputStream fis = new FileInputStream(filePath);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheet(sheetName);
        int usedColIndex = -1;

        Row header = sheet.getRow(0);
        for (Cell cell : header) {
            if (cell.getStringCellValue().equalsIgnoreCase("used")) {
                usedColIndex = cell.getColumnIndex();
                break;
            }
        }

        if (usedColIndex == -1) {
            workbook.close();
            throw new Exception("'used' column not found");
        }

        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            Cell usedCell = row.getCell(usedColIndex);
            if (usedCell == null || !usedCell.getBooleanCellValue()) {
                workbook.close();
                return i;
            }
        }

        workbook.close();
        return -1;  // No unused rows
    }

    // ✅ Returns row index of the last used row (used = true)
    public static int getLastUsedRow(String filePath, String sheetName) throws Exception {
        FileInputStream fis = new FileInputStream(filePath);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheet(sheetName);
        int usedColIndex = -1;
        int lastUsedRowIndex = -1;

        Row header = sheet.getRow(0);
        for (Cell cell : header) {
            if (cell.getStringCellValue().equalsIgnoreCase("used")) {
                usedColIndex = cell.getColumnIndex();
                break;
            }
        }

        if (usedColIndex == -1) {
            workbook.close();
            throw new Exception("'used' column not found");
        }

        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            Cell usedCell = row.getCell(usedColIndex);
            if (usedCell != null && usedCell.getBooleanCellValue()) {
                lastUsedRowIndex = i;
            }
        }

        workbook.close();
        return lastUsedRowIndex;
    }

    // ✅ Returns value of a specific cell using column header name
    public static String getCellValue(String filePath, String sheetName, int rowIndex, String columnName) throws Exception {
        FileInputStream fis = new FileInputStream(filePath);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheet(sheetName);
        Row header = sheet.getRow(0);
        int columnIndex = -1;

        for (Cell cell : header) {
            if (cell.getStringCellValue().trim().equalsIgnoreCase(columnName.trim())) {
                columnIndex = cell.getColumnIndex();
                break;
            }
        }

        if (columnIndex == -1) {
            workbook.close();
            throw new Exception("Column '" + columnName + "' not found");
        }

        Row row = sheet.getRow(rowIndex);
        if (row == null) {
            workbook.close();
            throw new Exception("Row " + rowIndex + " not found");
        }

        Cell cell = row.getCell(columnIndex);
        workbook.close();
        return (cell != null) ? cell.toString().trim() : "";
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\helper\ExcelWriter.java
--------------------------------------------------------------------------------

package helper;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;

public class ExcelWriter {

    public static void markRowUsed(String filePath, String sheetName, int rowIndex) throws Exception {
        FileInputStream fis = new FileInputStream(filePath);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheet(sheetName);
        Row header = sheet.getRow(0);

        int usedColIndex = -1;
        for (Cell cell : header) {
            if (cell.getStringCellValue().equalsIgnoreCase("used")) {
                usedColIndex = cell.getColumnIndex();
                break;
            }
        }

        if (usedColIndex == -1) {
            workbook.close();
            throw new Exception("'used' column not found");
        }

        Row row = sheet.getRow(rowIndex);
        if (row == null) row = sheet.createRow(rowIndex);
        Cell usedCell = row.getCell(usedColIndex);
        if (usedCell == null) usedCell = row.createCell(usedColIndex);

        usedCell.setCellValue(true);

        fis.close();  // Close input before writing

        FileOutputStream fos = new FileOutputStream(filePath);
        workbook.write(fos);
        fos.close();
        workbook.close();
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\helper\Log.java
--------------------------------------------------------------------------------

package helper;

import org.apache.logging.log4j.LogManager;
import org.testng.log4testng.Logger;

public class Log {
    //Initialize Log4j instance
    private static final Logger Log = (Logger) LogManager.getLogger(Log.class);

    //Info Level Logs
    public static void info(String message) {
        Log.info(message);
    }

    //Warn Level Logs
    public static void warn(String message) {
        Log.warn(message);
    }

    //Error Level Logs
    public static void error (String message){
        Log.error(message);
    }

    //Fatal Level Logs
    public static void fatal (String message){
        Log.fatal(message);
    }

    //Debug Level Logs
    public static void debug (String message){
        Log.debug(message);
    }
}



--------------------------------------------------------------------------------
FILE: src\test\java\helper\Utilities.java
--------------------------------------------------------------------------------

package helper;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Utilities {
    static Date date = new Date();
    static Timestamp ts = new Timestamp(date.getTime());
    static SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-M-d HH_mm_ss");
    static String timeStamp = simpleDateFormat.format(ts).replace(" ", "_").replace("-", "_");
    static String[] splitedDate = timeStamp.split("_");

    public static String generateEmail() {
        return "test" + timeStamp + "@gmail.com";
    }

    public static String generateUserName() {
        return "UserName_" + timeStamp;
    }

    public static String generateFirstName() {
        return "FName_" + timeStamp;
    }

    public static String generateLastName() {
        return "LName_" + timeStamp;
    }

    public static String generatePassword() {
        return timeStamp.replace("_", "");
    }

    public static String generateAddress() {
        return "Address " + timeStamp;
    }

    public static String generateAddress2() {
        return "Address2 " + timeStamp;
    }

    public static String generateState() {
        return "N/A";
    }

    public static String generateCity() {
        return "Dhaka";
    }

    public static String generateZip() {
        return "201";
    }

    public static String generateMobile() {
        return "123456789";
    }

    public static String getCurrentYear() {
        return splitedDate[0];
    }

    public static String getCurrentMonth() {
        return splitedDate[1];
    }

    public static String getCurrentDay() {
        return splitedDate[2];
    }

    public static String generateComment() {
        return "hello, make burger extra spicy " + timeStamp;
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\modules\ExtentManager.java
--------------------------------------------------------------------------------

package modules;

import java.io.File;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentManager {

    static Date date = new Date();
    static Timestamp ts = new Timestamp(date.getTime());
    static SimpleDateFormat timestamp = new SimpleDateFormat("yyyy-MM-dd_HH_mm_ss");
    static String timeStamp = timestamp.format(ts).replace(" ", "_").replace("-", "_");

    public static final String fileSeperator = System.getProperty("file.separator");
    public static final String reportFilepath = System.getProperty("user.dir") + fileSeperator + "Reports" + fileSeperator + "Report_" + timeStamp;
    private static final String reportFileName = "Test_Automation_Report_" + timeStamp + ".html";
    private static final String reportFileLocation = reportFilepath + fileSeperator + reportFileName;

    private static ExtentReports extent;

    public static ExtentReports getInstance() {
        if (extent == null)
            createInstance();
        return extent;
    }

    public static ExtentReports createInstance() {
        String fileName = getReportPath();
        ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter(fileName);
        htmlReporter.config().setTheme(Theme.STANDARD);
        htmlReporter.config().setDocumentTitle(reportFileName);
        htmlReporter.config().setEncoding("utf-8");
        htmlReporter.config().setReportName(reportFileName);
        extent = new ExtentReports();
        extent.attachReporter(htmlReporter);
        return extent;
    }

    private static String getReportPath() {
        File testDirectory = new File(reportFilepath);
        if (!testDirectory.exists()) {
            if (testDirectory.mkdirs()) {
                System.out.println("Directory: " + reportFilepath + " is created!");
            } else {
                System.out.println("Failed to create directory: " + reportFilepath);
                return System.getProperty("user.dir");
            }
        } else {
            System.out.println("Directory already exists: " + reportFilepath);
        }
        return reportFileLocation;
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\modules\ExtentTestManager.java
--------------------------------------------------------------------------------

package modules;

import java.util.HashMap;
import java.util.Map;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;

public class ExtentTestManager {

    static Map<Integer, ExtentTest> extentTestMap = new HashMap<>();
    static ExtentReports extent = ExtentManager.getInstance();

    public static synchronized ExtentTest getTest() {
        return extentTestMap.get((int) (long) (Thread.currentThread().getId()));
    }

    public static synchronized void endTest() {
        extent.flush();
    }

    public static synchronized ExtentTest startTest(String testName) {
        ExtentTest test = extent.createTest(testName);
        extentTestMap.put((int) (long) (Thread.currentThread().getId()), test);
        return test;
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\modules\TestListener.java
--------------------------------------------------------------------------------

package modules;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.ExtentTest;
import tests.BaseTest;

public class TestListener implements ITestListener {

    @Override
    public void onStart(ITestContext context) {
        System.out.println("*** Test Suite " + context.getName() + " started ***");
    }

    @Override
    public void onFinish(ITestContext context) {
        System.out.println("*** Test Suite " + context.getName() + " ending ***");
        ExtentTestManager.endTest();
        ExtentManager.getInstance().flush();
    }

    @Override
    public void onTestStart(ITestResult result) {
        System.out.println("*** Running test method " + result.getMethod().getMethodName() + "...");
        ExtentTestManager.startTest(result.getMethod().getMethodName());
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        System.out.println("*** Executed " + result.getMethod().getMethodName() + " test successfully...");
        ExtentTest test = ExtentTestManager.getTest();
        if (test != null) {
            test.log(Status.PASS, "Test passed");
        }
    }

    @Override
    public void onTestFailure(ITestResult result) {
        System.out.println("*** Test execution " + result.getMethod().getMethodName() + " failed...");
        ExtentTest test = ExtentTestManager.getTest();
        if (test != null) {
            test.log(Status.FAIL, "Test Failed: " + result.getThrowable());

            // Optional: Attach screenshot
            String screenshotPath = BaseTest.captureScreenshot(result.getMethod().getMethodName());
            try {
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (Exception e) {
                System.out.println("Screenshot attachment failed: " + e.getMessage());
            }
        }
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        System.out.println("*** Test " + result.getMethod().getMethodName() + " skipped...");
        ExtentTest test = ExtentTestManager.getTest();
        if (test != null) {
            test.log(Status.SKIP, "Test Skipped");
        }
    }

    @Override
    public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
        System.out.println("*** Test failed but within success percentage % " + result.getMethod().getMethodName());
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\pages\CartPage.java
--------------------------------------------------------------------------------

package pages;

import com.aventstack.extentreports.Status;
import modules.ExtentTestManager;
import org.openqa.selenium.WebElement;
import tests.BaseTest;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CartPage extends BaseTest {

    //Start: Button Name
    public final static String proceedToCheckoutButtonLabel = "Proceed To Checkout";
    public final static String registerLoginButtonLabel = "Register / Login";
    public final static String placeOrderButtonLabel = "Place Order";
    //End:   Button Name

    //Start: DivID
    public final static String cartInfoDivID = "cart_info";
    //End: DivID

    //Start: Field label
    public final static String totalAmountFieldLabel = "Total Amount";
    //End: Field label

    //Start: Table Column Header
    public final static String itemColumnLabel = "Item";
    public final static String descriptionColumnLabel = "Description";
    public final static String priceColumnLabel = "Price";
    public final static String quantityColumnLabel = "Quantity";
    public final static String totalColumnLabel = "Total";
    //End: Table Column Header

    //Start: Url
    public final static String viewCartUrlextention = "view_cart";
    public final static String checkoutUrlextention = "checkout";
    //End: Url

    //Start: DivID
    public final static String checOutModalDivID = "checkoutModal";
    public final static String addressDeliveryDivID = "address_delivery";
    public final static String addressInvoiceDivID = "address_invoice";
    //End: DivID

    //Start: TextArea label
    public final static String ifYouWouldLikeToAddACommentAboutYourOrderPleaseWriteItInTheFieldBelowTextAreaLabel = "If you would like to add a comment about your order, please write it in the field below.";
    //End: TextArea label

    public List<String> getAllTextFromArea(String modalDivID, String tagName){
        String elementLocator = "//*[local-name()='ul'][@id='"+modalDivID+"']//"+tagName;
        List <String> values = new ArrayList<>(Collections.emptyList());
        try{
            waitForElementsPresence(elementLocator);
            values = getTextFromAllElements(elementLocator);
            for (String value: values) {
                ExtentTestManager.getTest().log(Status.PASS, "'"+ value+"' values are retrived from line no  "+ String.valueOf(values.indexOf(value) +1));
            }
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
        return values;
    }

    public String getSpecificTableValue(String modalDivID, String columnIdentifier, String rowIdentifier, String atrributeName){
        String allColumnHeader = "//*[local-name()='div'][@id='"+modalDivID+"']//thead//td";
        String targetColumnHeader = "//*[local-name()='div'][@id='"+modalDivID+"']//thead//td[normalize-space()='"+columnIdentifier+"']";
        String value="";
        try{
            List <WebElement> allColumnHeaderElements = getAllElementsFromLocator(allColumnHeader);
            WebElement element = getElementFromLocator(targetColumnHeader);
            int coulumnIndex = allColumnHeaderElements.indexOf(element)+1;
            String gridDataLocator = "//*[local-name()='div'][@id='"+modalDivID+"']//tbody//td//a[normalize-space()='"+rowIdentifier+"']/../../../td["+coulumnIndex+"]" +
                    "//*[local-name()='p' or local-name()='button' or local-name()='img']";
            if(!atrributeName.equals("")){
                value = getAttributeFromElement(gridDataLocator, atrributeName);
            }
            else value = getTextFromElement(gridDataLocator);
            ExtentTestManager.getTest().log(Status.PASS, "'"+value+"' value is retrived from column '"+columnIdentifier+ "' for item '"+ rowIdentifier+"'");
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
        return value;
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\pages\HomePage.java
--------------------------------------------------------------------------------

package pages;

import com.aventstack.extentreports.Status;
import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;


import modules.ExtentTestManager;
import tests.BaseTest;

public class HomePage extends BaseTest {

    //Start: Tab Label name
    public final static String homeTabLabel = "Home";
    public final static String cartTabLabel = "Cart";
    public final static String signUpLoginTabLabel = "Signup / Login";
    public final static String loggedInAsTabLabel = "Logged in as";
    public final static String productsTabLabel = "Products";
    public final static String logOutTabLabel = "Logout";
    public final static String deleteAccountLabel = "Delete Account";
    //End: Tab Label name

    //Start: Url
    public final static String baseUrl = "https://www.automationexercise.com/";
    //End: Url

    //Start: tag Name
    public final static String uTag = "u";
    public final static String pTag = "p";
    public final static String h4Tag = "h4";
    public final static String bTag = "b";
    public final static String liTag = "li";
    //End: tag Name

    //Start: DivID
    public final static String cartModalDivID = "cartModal";
    //End: DivID

    //Start: Class Name
    public final static String productOverlayClassName = "product-overlay";
    //End:  Class Name

    //Start: Button Name
    public final static String addToCartButtonLabel = "Add to cart";
    public final static String viewCartButtonLabel = "View Cart";
    public final static String viewProductButtonLabel = "View Product";
    //End:   Button Name

    public String getTabAttribute(String tabName, String attributeName){
        String tabLocator = "//li//a[normalize-space(text())='"+ tabName +"']";
        String value="";
        try{
            waitForElementPresence(tabLocator);
            value = getAttributeFromElement(tabLocator, attributeName);
            ExtentTestManager.getTest().log(Status.PASS, tabName+"'s "+ attributeName + " attribute value is "+value);
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
        return value;
    }

    public void dismissCookieConsentIfVisible() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
            WebElement consentBtn = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.cssSelector(".fc-button.fc-cta-consent")));
            if (consentBtn.isDisplayed()) {
                consentBtn.click();
                System.out.println("✅ Cookie consent popup dismissed.");
            }
        } catch (Exception e) {
            System.out.println("ℹ️ Cookie consent popup not shown or already dismissed.");
        }
    }

    public void clickOnAddToCartButtonForSpecificItem(String itemName){
        String viewProductLocator = "//p[normalize-space(text())='"+itemName+"']/../../..//li//a[normalize-space(text())='"+viewProductButtonLabel+"']";
        String itemImageLocator = "//p[normalize-space(text())='"+itemName+"']/..//img";
        String buttonLocator = "//div[@class='"+productOverlayClassName+"']//p[normalize-space(text())='"+ itemName+"']/..//a[normalize-space(text())='"+addToCartButtonLabel+"']";
        try{
            waitForElementPresence(viewProductLocator);
            moveToSpecificElement(viewProductLocator);
            waitForElementVisibility(itemImageLocator);
            moveToSpecificElement(itemImageLocator);
            waitForElementVisibility(buttonLocator);
            clickOnElement(buttonLocator, true);
            ExtentTestManager.getTest().log(Status.PASS, itemName+" item is added to cart");
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
    }

    public String getTextFromModal(String modalDivID, String tagName){
        String elementLocator = "//*[local-name()='div' or local-name()='section'][@id='"+modalDivID+"']//"+tagName;
        String value="";
        try{
            waitForElementVisibility(elementLocator);
            value = StringUtils.normalizeSpace(getTextFromElement(elementLocator));
            ExtentTestManager.getTest().log(Status.PASS, value + " value is retrived");
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
        return value;
    }

    public void clickOnButton(String buttonName, boolean scriptExecutor){
        String buttonLocator = "//*[local-name()='a' or local-name()='button'][normalize-space(text())='"+buttonName+"']";
        try{
            waitForElementPresence(buttonLocator);
            clickOnElement(buttonLocator, scriptExecutor);
            ExtentTestManager.getTest().log(Status.PASS, buttonName +" button is clicked");
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
    }

    public void setTextInSpecificField(String fieldLabel, String textValue){
        String fieldLocator = "//label[normalize-space(text())='"+fieldLabel+"']/..//*[local-name()='input' or local-name()='textarea']";
        try{
            waitForElementPresence(fieldLocator);
            setTextInField(fieldLocator, textValue);
            ExtentTestManager.getTest().log(Status.PASS, textValue +" value is set for field "+fieldLabel);
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
    }

    public void clickOnElementWithTagName(String tagName, String buttonName, boolean scriptExecutor){
        String elementLocator = "//*[local-name()='"+tagName+"'][normalize-space(text())='"+buttonName+"']";
        try{
            waitForElementPresence(elementLocator);
            clickOnElement(elementLocator, scriptExecutor);
            ExtentTestManager.getTest().log(Status.PASS, buttonName +" element is clicked");
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
    }

    public String getLoggedInUserName(){
        String tabLocator = "//a[normalize-space(text())='"+ loggedInAsTabLabel +"']/..//b";
        String value="";
        try{
            waitForElementPresence(tabLocator);
            value = getTextFromElement(tabLocator);
            ExtentTestManager.getTest().log(Status.PASS, value + " user is loggedIn right now");
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
        return value;
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\pages\LoginSignUpPage.java
--------------------------------------------------------------------------------

package pages;

import org.openqa.selenium.support.ui.Select;

import com.aventstack.extentreports.Status;

import modules.ExtentTestManager;
import tests.BaseTest;

public class LoginSignUpPage extends BaseTest {

    // Start: Field Label
    public final static String passwordFieldLabel = "Password";
    public final static String firstNameFieldLabel = "First name";
    public final static String lastNameFieldLabel = "Last name";
    public final static String companyFieldLabel = "Company";
    public final static String addressFieldLabel = "Address";
    public final static String address2FieldLabel = "Address 2";
    public final static String stateFieldLabel = "State";
    public final static String cityFieldLabel = "City";
    public final static String zipCodeFieldLabel = "Zipcode";
    public final static String mobileNumberFieldLabel = "Mobile Number";
    // End: Field Label

    // Start: Placeholder text
    public final static String nameFieldPlaceholderText = "Name";
    public final static String emailAddressFieldPlaceholderText = "Email Address";
    // End: Placeholder text

    // Start: Button Name
    public final static String signUpButtonLabel = "Signup";
    public final static String loginButtonLabel = "Login";
    public final static String createAccountLabel = "Create Account";
    public final static String continueLabel = "Continue";
    // End: Button Name

    // Start: Section Header text
    public final static String newUserSignupText = "New User Signup!";
    public final static String loginToYourAccountText = "Login to your account";

    // ✅ Added for compatibility — matches your previous call
    public final static String loginText = loginToYourAccountText;
    // End: Section Header text

    // Start: Url
    public final static String loginUrlextention = "login";
    public final static String signupUrlextention = "signup";
    public final static String accountCreatedUrlextention = "account_created";
    // End: Url

    // Start: Section ID
    public final static String formSectionID = "form";
    // End: Section ID

    // Start: Dropdown Label
    public final static String dateOfBirthDropdownLabel = "Date of Birth";
    public final static String dayDropdownLabel = "Day";
    public final static String monthDropdownLabel = "Month";
    public final static String yearDropdownLabel = "Year";
    // End: Dropdown Label

    public void setTextInSpecificFieldWithPalceHolder(String sectionHeader, String placeholderText, String textValue) {
        String fieldLocator = "//h2[normalize-space(.)='" + sectionHeader + "']/..//input[@placeholder ='" + placeholderText + "']";
        try {
            waitForElementVisibility(fieldLocator);
            setTextInField(fieldLocator, textValue);
            ExtentTestManager.getTest().log(Status.PASS,
                    textValue + " value is set for field with " + placeholderText + " placeholder");
        } catch (Exception e) {
            captureScreenshot();
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
        }
    }

    public void selectRadioButtonOption(String optionLabel) {
        String elementLocator = "//label[normalize-space(.)='" + optionLabel + "']/..//input";
        try {
            waitForElementVisibility(elementLocator);
            clickOnElement(elementLocator, false);
            ExtentTestManager.getTest().log(Status.PASS, optionLabel + " Radio button is selected");
        } catch (Exception e) {
            captureScreenshot();
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
        }
    }

    public void selectValueFromDropdown(String dropdownLabel, String defaultValue, String value) {
        String elementLocator = "//label[normalize-space(.)='" + dropdownLabel + "']/..//option[normalize-space(text())='" + defaultValue + "']/../..//select";
        try {
            waitForElementVisibility(elementLocator);
            Select select = new Select(getElementFromLocator(elementLocator));
            select.selectByValue(value);
            ExtentTestManager.getTest().log(Status.PASS,
                    value + " value is selected for " + defaultValue + " dropdown");
        } catch (Exception e) {
            captureScreenshot();
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\pages\PaymentPage.java
--------------------------------------------------------------------------------

package pages;

import com.aventstack.extentreports.Status;
import modules.ExtentTestManager;
import tests.BaseTest;

public class PaymentPage extends BaseTest {

    //Start: Field Label
    public final static String nameOnCardFieldLabel = "Name on Card";
    public final static String cardNumberFieldLabel = "Card Number";
    public final static String expirationLabel = "Expiration";
    public final static String cvcFieldLabel = "CVC";
    //End: Field Label

    //Start: Button Name
    public final static String payAndConfirmOrderButtonLabel = "Pay and Confirm Order";
    //End:   Button Name

    //Start: Url
    public final static String paymentUrlextention = "payment";
    public final static String paymentDoneUrlextention = "payment_done";
    //End: Url

    //Start: Section ID
    public final static String formSectionID = "form";
    //End: Section ID

    public void setTextInSpecificFieldInPaymentPage(String fieldLabel, String textValue){
        String fieldLocator = "//label[normalize-space(text())='"+fieldLabel+"']/../following::div/*[local-name()='input' or local-name()='textarea']";
        try{
            waitForElementPresence(fieldLocator);
            setTextInField(fieldLocator, textValue);
            ExtentTestManager.getTest().log(Status.PASS, textValue +" value is set for field "+fieldLabel);
        }
        catch (Exception e){
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            captureScreenshot();
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\tests\AccountDeletionTest.java
--------------------------------------------------------------------------------

package tests;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.Assertion;

import com.aventstack.extentreports.Status;

import modules.ExtentTestManager;
import pages.HomePage;

@Listeners(modules.TestListener.class)
public class AccountDeletionTest extends BaseTest {

    HomePage homePage = new HomePage();
    Assertion assertion = new Assertion();

    @Test(priority = 1007, dependsOnMethods = {"tests.SubscriptionTest.Test033_subscribeWithDuplicateEmail"})
    public void Test034_validateAccountDeletionAndRedirect() {
        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
        JavascriptExecutor js = (JavascriptExecutor) driver;

        try {
            ExtentTestManager.getTest().log(Status.INFO, "🗑 Clicking on 'Delete Account'...");
            driver.findElement(By.xpath("//a[@href='/delete_account']")).click();

            wait.until(ExpectedConditions.urlToBe("https://www.automationexercise.com/delete_account"));
            ExtentTestManager.getTest().log(Status.INFO, "✅ URL confirmed: /delete_account");

            // ✅ Wait for heading text with normalization
            WebElement confirmationHeading = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//h2[normalize-space()='Account Deleted!']")));
            assertion.assertTrue(confirmationHeading.isDisplayed(), "'Account Deleted!' heading not visible");
            ExtentTestManager.getTest().log(Status.INFO, "🟢 'Account Deleted!' heading confirmed");

            // ✅ Scroll and click Continue using JS
            WebElement continueBtn = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//a[@data-qa='continue-button']")));
            js.executeScript("arguments[0].scrollIntoView(true);", continueBtn);
            js.executeScript("arguments[0].click();", continueBtn);
            ExtentTestManager.getTest().log(Status.INFO, "⏭ Clicked 'Continue' via JavaScriptExecutor");

            Thread.sleep(8000); // wait for home redirection
            ExtentTestManager.getTest().log(Status.PASS, "✅ Test034 completed: deletion + redirect verified");

        } catch (Exception e) {
            captureScreenshot("Test034_validateAccountDeletionAndRedirect");
            System.err.println("🛑 DEBUG PAGE SOURCE:\n" + driver.getPageSource());
            throw new RuntimeException("❌ Account deletion flow failed: " + e.getMessage(), e);
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\tests\BaseTest.java
--------------------------------------------------------------------------------

package tests;

import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Listeners;

import modules.ExtentManager;
import pages.HomePage;

@Listeners(modules.TestListener.class)
public class BaseTest {

    protected static WebDriver driver;
    private static WebDriverWait wait;
    private static final int defaultImpliciteWait = 15;
    private static final int defaultWait = 60;

    @BeforeSuite(alwaysRun = true)
    public void browserSetUp() {
        ChromeOptions chromeOptions = new ChromeOptions();
        chromeOptions.addArguments("--remote-allow-origins=*");
        chromeOptions.setExperimentalOption("excludeSwitches", Collections.singletonList("enable-automation"));
        chromeOptions.addArguments("--start-maximized");
        chromeOptions.addArguments("--disable-extensions");
        chromeOptions.addArguments("disable-notifications");
        chromeOptions.addArguments("test-type");
        chromeOptions.setPageLoadStrategy(PageLoadStrategy.EAGER);

        Map<String, Object> prefs = new HashMap<>();
        prefs.put("autofill.profile_enabled", false);
        prefs.put("credentials_enable_service", false);
        prefs.put("profile.password_manager_enabled", false);
        chromeOptions.setExperimentalOption("prefs", prefs);
        chromeOptions.addExtensions(new File(System.getProperty("user.dir") + "\\src\\main\\resources\\Extentions\\AdBlock.crx"));

        driver = new ChromeDriver(chromeOptions);
        driver.get(HomePage.baseUrl);
        closeAllWindowExceptCurrentOne();
        wait = new WebDriverWait(driver, Duration.ofSeconds(defaultWait));
    }

    public WebDriver getDriver() {
        return driver;
    }


    public void goToUrl(String pageUrl) {
        driver.get(pageUrl);
    }

    public String getCurrentURL() {
        return driver.getCurrentUrl();
    }

    public boolean isProperUrlLoaded(String expectedUrl) {
        return expectedUrl.contains(getCurrentURL());
    }

    public WebElement getElementFromLocator(String elementLocator) {
        return driver.findElement(By.xpath(elementLocator));
    }

    public List<WebElement> getAllElementsFromLocator(String elementLocator) {
        return driver.findElements(By.xpath(elementLocator));
    }

    public static void closeAllWindowExceptCurrentOne() {
        String originalHandle = driver.getWindowHandle();
        for (String handle : driver.getWindowHandles()) {
            if (!handle.equals(originalHandle)) {
                driver.switchTo().window(handle);
                driver.close();
            }
        }
        driver.switchTo().window(originalHandle);
    }

    public void clickOnElement(String elementLocator, boolean withJSExecutor) {
        WebElement element = driver.findElement(By.xpath(elementLocator));
        moveToSpecificElement(element);
        if (withJSExecutor) {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("arguments[0].click();", element);
        } else {
            element.click();
        }
    }

    public void moveToSpecificElement(String elementLocator) {
        Actions actions = new Actions(driver);
        WebElement element = driver.findElement(By.xpath(elementLocator));
        actions.moveToElement(element).perform();
    }

    public void moveToSpecificElement(WebElement element) {
        Actions actions = new Actions(driver);
        actions.moveToElement(element).perform();
    }

    public String getTextFromElement(String elementLocator) {
        WebElement element = driver.findElement(By.xpath(elementLocator));
        return element.getText();
    }

    public List<String> getTextFromAllElements(String elementsLocator) {
        List<WebElement> webElements = driver.findElements(By.xpath(elementsLocator));
        List<String> values = new ArrayList<>();
        for (WebElement element : webElements) {
            values.add(StringUtils.normalizeSpace(element.getAttribute("innerText")));
        }
        return values;
    }

    public String getAttributeFromElement(String elementLocator, String attributeName) {
        WebElement element = driver.findElement(By.xpath(elementLocator));
        return element.getAttribute(attributeName);
    }

    public void setTextInField(String fieldLocator, String textValue) {
        WebElement element = driver.findElement(By.xpath(fieldLocator));
        moveToSpecificElement(element);
        element.click();
        element.sendKeys(textValue);
    }

    public boolean isElementDisplayed(String elementLocator) {
        WebElement element = driver.findElement(By.xpath(elementLocator));
        moveToSpecificElement(element);
        return element.isDisplayed();
    }

    public boolean isElementSelected(String elementLocator) {
        WebElement element = driver.findElement(By.xpath(elementLocator));
        moveToSpecificElement(element);
        return element.isSelected();
    }

    public boolean isElementEnabled(String elementLocator) {
        WebElement element = driver.findElement(By.xpath(elementLocator));
        moveToSpecificElement(element);
        return element.isEnabled();
    }

    public void waitForElementVisibility(String locator) {
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(locator)));
    }

    public void waitForElementsVisibility(String locator) {
        wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.xpath(locator)));
    }

    public void waitForElementPresence(String locator) {
        wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(locator)));
    }

    public void waitForElementsPresence(String locator) {
        wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.xpath(locator)));
    }

    public static void captureScreenshot() {
        try {
            if (driver == null) {
                System.out.println("⚠️ WebDriver is null. Skipping screenshot.");
                return;
            }

            // Defensive: check session validity
            byte[] dummy = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
            if (dummy == null || dummy.length == 0) {
                System.out.println("⚠️ Invalid WebDriver session. Cannot take screenshot.");
                return;
            }

            TakesScreenshot screenshot = (TakesScreenshot) driver;
            File src = screenshot.getScreenshotAs(OutputType.FILE);

            Date d = new Date();
            Timestamp ts = new Timestamp(d.getTime());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH_mm_ss");
            String timeStamp = sdf.format(ts);
            String screenshotName = timeStamp + ".jpg";

            File screenshotDir = new File(ExtentManager.reportFilepath + ExtentManager.fileSeperator + "Screenshots");
            if (!screenshotDir.exists()) screenshotDir.mkdirs();

            FileUtils.copyFile(src, new File(screenshotDir, screenshotName));
            System.out.println("✅ Screenshot captured: " + screenshotName);

        } catch (org.openqa.selenium.NoSuchSessionException e) {
            System.out.println("⚠️ No active session for screenshot: " + e.getMessage());
        } catch (org.openqa.selenium.WebDriverException e) {
            System.out.println("⚠️ WebDriver error during screenshot: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("⚠️ Screenshot file IO failed: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("⚠️ Unexpected error during screenshot capture: " + e.getMessage());
        }
    }



    public static String captureScreenshot(String testName) {
        try {
            if (driver == null) {
                System.out.println("⚠️ WebDriver is null. Skipping screenshot.");
                return null;
            }

            // Defensive: check session validity
            byte[] dummy = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
            if (dummy == null || dummy.length == 0) {
                System.out.println("⚠️ Invalid WebDriver session. Cannot take screenshot.");
                return null;
            }

            TakesScreenshot screenshot = (TakesScreenshot) driver;
            File src = screenshot.getScreenshotAs(OutputType.FILE);

            Date d = new Date();
            Timestamp ts = new Timestamp(d.getTime());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH_mm_ss");
            String timeStamp = sdf.format(ts);
            String screenshotName = testName + "_" + timeStamp + ".png";

            File screenshotDir = new File(ExtentManager.reportFilepath + ExtentManager.fileSeperator + "Screenshots");
            if (!screenshotDir.exists()) screenshotDir.mkdirs();

            File dest = new File(screenshotDir, screenshotName);
            FileUtils.copyFile(src, dest);
            System.out.println("✅ Screenshot captured for test: " + screenshotName);
            return dest.getAbsolutePath();

        } catch (org.openqa.selenium.NoSuchSessionException e) {
            System.out.println("⚠️ No active session for screenshot: " + e.getMessage());
            return null;
        } catch (org.openqa.selenium.WebDriverException e) {
            System.out.println("⚠️ WebDriver error during screenshot: " + e.getMessage());
            return null;
        } catch (IOException e) {
            System.out.println("⚠️ Screenshot file IO failed: " + e.getMessage());
            return null;
        } catch (Exception e) {
            System.out.println("⚠️ Unexpected error during screenshot capture: " + e.getMessage());
            return null;
        }
    }



    @AfterSuite(alwaysRun = true)
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\tests\ContactUsTest.java
--------------------------------------------------------------------------------

package tests;

import java.io.File;
import java.time.Duration;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.Assertion;

import com.aventstack.extentreports.Status;

import modules.ExtentTestManager;
import pages.HomePage;

@Listeners(modules.TestListener.class)
public class ContactUsTest extends BaseTest {

    HomePage homePage = new HomePage();
    Assertion assertion = new Assertion();

    @Test(priority = 1008, dependsOnMethods = {"tests.AccountDeletionTest.Test034_validateAccountDeletionAndRedirect"})
    public void Test035_validateContactUsFormSubmission() {
        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
        JavascriptExecutor js = (JavascriptExecutor) driver;

        try {
            ExtentTestManager.getTest().log(Status.INFO, "📨 Navigating to Contact Us page...");
            WebElement contactLink = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//a[@href='/contact_us']")));
            contactLink.click();

            wait.until(ExpectedConditions.urlContains("/contact_us"));
            ExtentTestManager.getTest().log(Status.INFO, "✅ Contact Us page loaded");

            driver.findElement(By.name("name")).sendKeys("Anandhu Bhaskar");
            driver.findElement(By.name("email")).sendKeys("anandhu@example.com");
            driver.findElement(By.name("subject")).sendKeys("Testing Contact Form");
            driver.findElement(By.name("message")).sendKeys("This is an automated message for testing.");

            ExtentTestManager.getTest().log(Status.INFO, "📝 Form fields filled successfully");

            // Upload file
            String uploadPath = new File("src/test/uploads/image001.jpg").getAbsolutePath();
            WebElement fileInput = driver.findElement(By.name("upload_file"));
            fileInput.sendKeys(uploadPath);
            ExtentTestManager.getTest().log(Status.INFO, "📎 File uploaded: image001.jpg");

            // Submit the form
            WebElement submitButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//input[@data-qa='submit-button']")));
            js.executeScript("arguments[0].scrollIntoView(true);", submitButton);
            js.executeScript("arguments[0].click();", submitButton);
            ExtentTestManager.getTest().log(Status.INFO, "📤 Form submitted");

            // Accept alert
            wait.until(ExpectedConditions.alertIsPresent());
            Alert alert = driver.switchTo().alert();
            alert.accept();
            ExtentTestManager.getTest().log(Status.INFO, "🔔 Alert accepted");

            // Confirm success message
            WebElement successText = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//*[contains(text(),'Success! Your details have been submitted successfully.')]")));
            assertion.assertTrue(successText.isDisplayed());
            ExtentTestManager.getTest().log(Status.PASS, "✅ Success message verified");

        } catch (Exception e) {
            captureScreenshot("Test035_validateContactUsFormSubmission");
            throw new RuntimeException("❌ Contact Us form submission failed: " + e.getMessage(), e);
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\tests\ProductListingTest.java
--------------------------------------------------------------------------------

package tests;

import java.time.Duration;
import java.util.Arrays;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.Assertion;

import com.aventstack.extentreports.Status;

import modules.ExtentTestManager;
import pages.HomePage;

@Listeners(modules.TestListener.class)
public class ProductListingTest extends BaseTest {

    HomePage homePage = new HomePage();
    Assertion assertion = new Assertion();

    @Test(priority = 1003, dependsOnMethods = {"tests.SignupWithExcelTest.Test023_validLoginAfterInvalidAttempt"})
    void Test030_verifyProductListingAndSearchFeatures() {
        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        JavascriptExecutor js = (JavascriptExecutor) driver;

        ExtentTestManager.getTest().log(Status.INFO, "🔎 Clicking on 'Products' tab...");
        homePage.clickOnButton("Products", false);
        wait.until(ExpectedConditions.urlContains("/products"));
        ExtentTestManager.getTest().log(Status.INFO, "✅ Reached Products page");

        js.executeScript("document.querySelectorAll('iframe, #aswift_1_host').forEach(e => e.style.display='none');");

        // Expand category toggles
        List<String> categoryIds = Arrays.asList("Women", "Men", "Kids");
        for (String id : categoryIds) {
            try {
                WebElement toggle = driver.findElement(By.cssSelector("a[href='#" + id + "']"));
                toggle.click();
                Thread.sleep(500);
                ExtentTestManager.getTest().log(Status.INFO, "📂 Toggled category: " + id);
            } catch (Exception e) {
                ExtentTestManager.getTest().log(Status.WARNING, "⚠️ Toggle failed for category: " + id);
            }
        }

        // Brand filter
        try {
            WebElement poloFilter = driver.findElement(By.xpath("//a[contains(@href,'/brand_products/Polo')]"));
            poloFilter.click();
            wait.until(ExpectedConditions.urlContains("/brand_products/Polo"));
            ExtentTestManager.getTest().log(Status.INFO, "✅ Brand filter applied: Polo");
        } catch (Exception e) {
            ExtentTestManager.getTest().log(Status.WARNING, "⚠️ Brand filter click failed");
        }

        // Search and verify Blue Top
        try {
            WebElement searchBox = driver.findElement(By.id("search_product"));
            searchBox.clear();
            searchBox.sendKeys("Blue Top", Keys.ENTER);
            Thread.sleep(2000);
            WebElement result = driver.findElement(By.xpath("//p[text()='Blue Top']"));
            assertion.assertEquals(result.isDisplayed(), true);
            ExtentTestManager.getTest().log(Status.INFO, "✅ Search result: Blue Top found");
        } catch (Exception e) {
            captureScreenshot("Test030_searchBlueTop");
            throw new RuntimeException("❌ Product search failed: " + e.getMessage(), e);
        }

        // Add Blue Top to cart
        try {
            js.executeScript("document.querySelectorAll('iframe, #aswift_1_host').forEach(e => e.style.display='none');");
            WebElement addToCartBtn = driver.findElement(By.xpath("//a[@data-product-id='1']"));
            js.executeScript("arguments[0].click();", addToCartBtn);
            Thread.sleep(2000);
            WebElement modalText = driver.findElement(By.xpath("//div[@class='modal-body']//p[contains(text(),'Your product has been added')]"));
            assertion.assertEquals(modalText.isDisplayed(), true);
            driver.findElement(By.cssSelector("button.close-modal")).click();
            ExtentTestManager.getTest().log(Status.INFO, "🛒 Added Blue Top to cart and closed modal");
        } catch (Exception e) {
            captureScreenshot("Test030_addToCart");
            throw new RuntimeException("❌ Add to cart failed: " + e.getMessage(), e);
        }

        // Search and open Saree detail
        try {
            WebElement searchBox = driver.findElement(By.id("search_product"));
            searchBox.clear();
            searchBox.sendKeys("Saree", Keys.ENTER);
            Thread.sleep(2000);
            js.executeScript("document.querySelectorAll('iframe, #aswift_1_host').forEach(e => e.style.display='none');");
            WebElement viewProduct = driver.findElement(By.xpath("//a[@href='/product_details/41']"));
            js.executeScript("arguments[0].click();", viewProduct);
            wait.until(ExpectedConditions.urlContains("/product_details/41"));
            ExtentTestManager.getTest().log(Status.INFO, "👗 Opened Saree product detail page");
        } catch (Exception e) {
            captureScreenshot("Test030_searchSaree");
            throw new RuntimeException("❌ Failed to search and view Saree: " + e.getMessage(), e);
        }

        // Wait for review section to load
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("review")));
            ExtentTestManager.getTest().log(Status.INFO, "📝 Review section loaded");
        } catch (Exception e) {
            captureScreenshot("Test030_reviewSectionTimeout");
            throw new RuntimeException("❌ Review section did not load: " + e.getMessage(), e);
        }

        // Submit review
        try {
            driver.findElement(By.id("name")).sendKeys("Test User");
            driver.findElement(By.id("email")).sendKeys("test@example.com");
            driver.findElement(By.id("review")).sendKeys("Elegant and stylish!");
            driver.findElement(By.id("button-review")).click();
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='review-section']//span[contains(text(),'Thank you')]")));
            WebElement successAlert = driver.findElement(By.xpath("//div[@id='review-section']//span[contains(text(),'Thank you')]"));
            assertion.assertEquals(successAlert.isDisplayed(), true);
            ExtentTestManager.getTest().log(Status.INFO, "📝 Review submitted for Saree");
        } catch (Exception e) {
            captureScreenshot("Test030_submitReview");
            throw new RuntimeException("❌ Review submission failed: " + e.getMessage(), e);
        }

        // Add Saree to cart and open cart
        try {
            js.executeScript("document.querySelectorAll('iframe, #aswift_1_host').forEach(e => e.style.display='none');");
            WebElement addToCartBtn = driver.findElement(By.cssSelector("button.cart"));
            js.executeScript("arguments[0].click();", addToCartBtn);
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='modal-body']//a[contains(@href,'/view_cart')]")));
            WebElement viewCartLink = driver.findElement(By.xpath("//div[@class='modal-body']//a[contains(@href,'/view_cart')]"));
            js.executeScript("arguments[0].click();", viewCartLink);
            wait.until(ExpectedConditions.urlContains("/view_cart"));
            ExtentTestManager.getTest().log(Status.INFO, "🛒 Navigated to cart page");
        } catch (Exception e) {
            captureScreenshot("Test030_addSareeAndViewCart");
            throw new RuntimeException("❌ Failed to add Saree or view cart: " + e.getMessage(), e);
        }

        // Final cart check
        try {
            WebElement blueTop = driver.findElement(By.id("product-1"));
            WebElement saree = driver.findElement(By.id("product-41"));
            assertion.assertEquals(blueTop.isDisplayed(), true);
            assertion.assertEquals(saree.isDisplayed(), true);
            ExtentTestManager.getTest().log(Status.INFO, "✅ Both Blue Top and Saree are present in cart");
        } catch (Exception e) {
            captureScreenshot("Test030_cartFinalVerification");
            throw new RuntimeException("❌ Cart verification failed: One or both items missing", e);
        }

        ExtentTestManager.getTest().log(Status.PASS, "✅ Test030_verifyProductListingAndSearchFeatures completed successfully");
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\tests\SignupWithExcelTest.java
--------------------------------------------------------------------------------

package tests;

import java.time.Duration;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.SkipException;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.Assertion;

import com.aventstack.extentreports.Status;

import helper.AccountLogger;
import helper.ExcelReader;
import helper.ExcelWriter;
import modules.ExtentTestManager;
import pages.HomePage;
import pages.LoginSignUpPage;

@Listeners(modules.TestListener.class)
public class SignupWithExcelTest extends BaseTest {

    HomePage homePage = new HomePage();
    LoginSignUpPage loginSignUpPage = new LoginSignUpPage();
    Assertion assertion = new Assertion();
    String validEmail, validPassword, validFirstName;

    @Test(dependsOnGroups = {"coreTests"}, priority = 999)
    void Test020_signupWithExcelData() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Excel-based signup");

        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
            driver.get("https://www.automationexercise.com/");
            homePage.dismissCookieConsentIfVisible();

            try {
                WebElement logoutBtn = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[href='/logout']")));
                if (logoutBtn.isDisplayed()) {
                    logoutBtn.click();
                    wait.until(ExpectedConditions.urlContains("/login"));
                }
            } catch (Exception ignored) {}

            homePage.clickOnButton(HomePage.signUpLoginTabLabel, false);
            wait.until(ExpectedConditions.urlContains("/login"));

            String excelPath = System.getProperty("user.dir") + "/src/test/resources/test_users_data.xlsx";
            int rowIndex = ExcelReader.getNextUnusedRow(excelPath, "Sheet1");
            if (rowIndex == -1) throw new SkipException("All Excel rows used");

            validFirstName = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "firstName");
            String lastName = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "lastName");
            validEmail = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "email");
            validPassword = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "password");
            String title = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "title");
            String day = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "dobDay");
            String month = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "dobMonth");
            String year = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "dobYear");
            String company = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "company");
            String address1 = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "address1");
            String address2 = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "address2");
            String state = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "state");
            String city = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "city");
            String zip = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "zip");
            String mobile = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "mobile");
            String country = ExcelReader.getCellValue(excelPath, "Sheet1", rowIndex, "country");

            loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.newUserSignupText, LoginSignUpPage.nameFieldPlaceholderText, validFirstName);
            loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.newUserSignupText, LoginSignUpPage.emailAddressFieldPlaceholderText, validEmail);
            homePage.clickOnButton(LoginSignUpPage.signUpButtonLabel, false);

            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("id_gender1")));

            if (title.equalsIgnoreCase("Mr")) {
                driver.findElement(By.id("id_gender1")).click();
            } else {
                driver.findElement(By.id("id_gender2")).click();
            }

            driver.findElement(By.id("password")).sendKeys(validPassword);

            String monthName = Month.of((int) Double.parseDouble(month)).getDisplayName(TextStyle.FULL, Locale.ENGLISH);
            new Select(driver.findElement(By.id("days"))).selectByVisibleText(String.valueOf((int) Double.parseDouble(day)));
            new Select(driver.findElement(By.id("months"))).selectByVisibleText(monthName);
            new Select(driver.findElement(By.id("years"))).selectByVisibleText(String.valueOf((int) Double.parseDouble(year)));

            if (!driver.findElement(By.id("newsletter")).isSelected()) driver.findElement(By.id("newsletter")).click();
            if (!driver.findElement(By.id("optin")).isSelected()) driver.findElement(By.id("optin")).click();

            driver.findElement(By.id("first_name")).sendKeys(validFirstName);
            driver.findElement(By.id("last_name")).sendKeys(lastName);
            driver.findElement(By.id("company")).sendKeys(company);
            driver.findElement(By.id("address1")).sendKeys(address1);
            driver.findElement(By.id("address2")).sendKeys(address2);
            new Select(driver.findElement(By.id("country"))).selectByVisibleText(country);
            driver.findElement(By.id("state")).sendKeys(state);
            driver.findElement(By.id("city")).sendKeys(city);
            driver.findElement(By.id("zipcode")).sendKeys(zip);
            driver.findElement(By.id("mobile_number")).sendKeys(mobile);

            driver.findElement(By.cssSelector("button[data-qa='create-account']")).click();
            wait.until(ExpectedConditions.urlContains("/account_created"));

            String confirmation = homePage.getTextFromModal(LoginSignUpPage.formSectionID, HomePage.bTag);
            assertion.assertEquals(confirmation, "ACCOUNT CREATED!", "Confirmation text mismatch");

            ExcelWriter.markRowUsed(excelPath, "Sheet1", rowIndex);
            AccountLogger.logAccount(validFirstName, validEmail);
            ExtentTestManager.getTest().log(Status.PASS, "✅ Signup completed for " + validEmail);

            homePage.clickOnButton(LoginSignUpPage.continueLabel, false);
            Thread.sleep(5000);

        } catch (Exception e) {
            captureScreenshot("Test020_signupWithExcelData");
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            throw new RuntimeException(e);
        }
    }

    @Test(priority = 1001, dependsOnMethods = {"Test020_signupWithExcelData"})
    void Test022_invalidLoginAfterLogout() {
        ExtentTestManager.getTest().log(Status.INFO, "🔄 Attempting invalid login after logout");

        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
            homePage.clickOnButton("Logout", false);
            wait.until(ExpectedConditions.urlContains("/login"));

            String fakeEmail = "wrong" + System.currentTimeMillis() + "@example.com";
            String fakePassword = "invalid123";

            loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.loginToYourAccountText, "Email Address", fakeEmail);
            loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.loginToYourAccountText, "Password", fakePassword);
            homePage.clickOnButton(LoginSignUpPage.loginButtonLabel, false);

            WebElement error = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("p[style='color: red;']")));
            String errorText = error.getText();
            ExtentTestManager.getTest().log(Status.INFO, "❌ Login failed with: " + errorText);

            Thread.sleep(3000);

        } catch (Exception e) {
            captureScreenshot("Test022_invalidLoginAfterLogout");
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            throw new RuntimeException(e);
        }
    }

    @Test(priority = 1002, dependsOnMethods = {"Test022_invalidLoginAfterLogout"})
    void Test023_validLoginAfterInvalidAttempt() {
        ExtentTestManager.getTest().log(Status.INFO, "🔁 Logging in with valid credentials after invalid attempt");

        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
            WebElement emailField = driver.findElement(By.name("email"));
            WebElement passwordField = driver.findElement(By.name("password"));
            emailField.clear();
            passwordField.clear();
            ExtentTestManager.getTest().log(Status.INFO, "✏️ Cleared email and password input fields");

            loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.loginToYourAccountText, "Email Address", validEmail);
            loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.loginToYourAccountText, "Password", validPassword);
            homePage.clickOnButton(LoginSignUpPage.loginButtonLabel, false);

            boolean loginSuccess = false;
            try {
                wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[href='/logout']")));
                loginSuccess = true;
            } catch (Exception e) {
                ExtentTestManager.getTest().log(Status.WARNING, "🔎 Logout button not found. Trying fallback...");
            }

            if (!loginSuccess) {
                String actualName = homePage.getLoggedInUserName();
                if (actualName != null && actualName.equalsIgnoreCase(validFirstName)) {
                    ExtentTestManager.getTest().log(Status.INFO, "✅ Fallback match using username: " + actualName);
                    loginSuccess = true;
                } else {
                    captureScreenshot("Test023_validLoginAfterInvalidAttempt");
                    throw new RuntimeException("❌ Login failed. 'logout' link and fallback check both failed.");
                }
            }

            ExtentTestManager.getTest().log(Status.PASS, "✅ Successfully logged back in as: " + validEmail);
            Thread.sleep(8000);

        } catch (Exception e) {
            captureScreenshot("Test023_validLoginAfterInvalidAttempt");
            ExtentTestManager.getTest().log(Status.FAIL, e.getMessage());
            throw new RuntimeException(e);
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\tests\SubscriptionTest.java
--------------------------------------------------------------------------------

package tests;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.Assertion;

import com.aventstack.extentreports.Status;

import helper.Utilities;
import modules.ExtentTestManager;
import pages.HomePage;

@Listeners(modules.TestListener.class)
public class SubscriptionTest extends BaseTest {

    HomePage homePage = new HomePage();
    Assertion assertion = new Assertion();

    @Test(priority = 1004, dependsOnMethods = {"tests.ProductListingTest.Test030_verifyProductListingAndSearchFeatures"})
    public void Test031_subscribeWithValidEmail() {
        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        JavascriptExecutor js = (JavascriptExecutor) driver;

        String email = Utilities.generateEmail();
        ExtentTestManager.getTest().log(Status.INFO, "🧪 Subscribing with valid email: " + email);

        try {
            js.executeScript("window.scrollTo(0, document.body.scrollHeight);");
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("susbscribe_email")));
            driver.findElement(By.id("susbscribe_email")).sendKeys(email);
            driver.findElement(By.id("subscribe")).click();
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[contains(text(),'You have been successfully subscribed!')]")));
            ExtentTestManager.getTest().log(Status.PASS, "✅ Subscription success alert verified");
        } catch (Exception e) {
            captureScreenshot("Test031_subscribeWithValidEmail");
            throw new RuntimeException("❌ Subscription with valid email failed: " + e.getMessage(), e);
        }
    }

    @Test(priority = 1005)
    public void Test032_subscribeWithInvalidEmail() {
        WebDriver driver = homePage.getDriver();
        JavascriptExecutor js = (JavascriptExecutor) driver;

        ExtentTestManager.getTest().log(Status.INFO, "🧪 Subscribing with invalid email: 'invalidemail'");

        try {
            js.executeScript("window.scrollTo(0, document.body.scrollHeight);");
            driver.findElement(By.id("susbscribe_email")).clear();
            driver.findElement(By.id("susbscribe_email")).sendKeys("invalidemail");
            driver.findElement(By.id("subscribe")).click();
            Thread.sleep(2000);

            boolean isAlertPresent = driver.getPageSource().contains("You have been successfully subscribed");
            assertion.assertEquals(isAlertPresent, true); // Site wrongly accepts invalid email
            ExtentTestManager.getTest().log(Status.WARNING, "⚠️ Success alert shown even for invalid email — site lacks validation.");
        } catch (Exception e) {
            captureScreenshot("Test032_subscribeWithInvalidEmail");
            throw new RuntimeException("❌ Unexpected failure during invalid email test: " + e.getMessage(), e);
        }
    }

    @Test(priority = 1006)
    public void Test033_subscribeWithDuplicateEmail() {
        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        JavascriptExecutor js = (JavascriptExecutor) driver;

        String email = "duplicate@example.com"; // known test value
        ExtentTestManager.getTest().log(Status.INFO, "🧪 Subscribing with duplicate email: " + email);

        try {
            js.executeScript("window.scrollTo(0, document.body.scrollHeight);");
            driver.findElement(By.id("susbscribe_email")).clear();
            driver.findElement(By.id("susbscribe_email")).sendKeys(email);
            driver.findElement(By.id("subscribe")).click();
            Thread.sleep(2000);

            boolean isSuccess = driver.getPageSource().contains("You have been successfully subscribed");
            assertion.assertEquals(isSuccess, true); // Site wrongly accepts duplicates
            ExtentTestManager.getTest().log(Status.WARNING, "⚠️ Success alert shown even for duplicate email — site does not block it.");
        } catch (Exception e) {
            captureScreenshot("Test033_subscribeWithDuplicateEmail");
            throw new RuntimeException("❌ Unexpected failure during duplicate email test: " + e.getMessage(), e);
        }
    }
}




--------------------------------------------------------------------------------
FILE: src\test\java\tests\Testcase1.java
--------------------------------------------------------------------------------

package tests;

import java.time.Duration;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.asserts.Assertion;
import org.testng.asserts.SoftAssert;

import com.aventstack.extentreports.Status;

import helper.Utilities;
import modules.ExtentTestManager;
import pages.CartPage;
import pages.HomePage;
import pages.LoginSignUpPage;
import pages.PaymentPage;

@Listeners(modules.TestListener.class)
public class Testcase1 extends BaseTest{
    HomePage homePage = new HomePage();
    LoginSignUpPage loginSignUpPage = new LoginSignUpPage();
    PaymentPage paymentPage = new PaymentPage();
    CartPage cartPage = new CartPage();
    Assertion assertion = new Assertion();
    SoftAssert softAssert = new SoftAssert();

    String userName = Utilities.generateUserName();
    String emailAddress = Utilities.generateEmail();
    String commentForTextArea = Utilities.generateComment();
    String cvcNumber = Utilities.generateZip();
    String cardNumber = Utilities.generateMobile();
    String currentMonth = Utilities.getCurrentMonth();
    String cardExpirationYear = String.valueOf(Integer.parseInt(Utilities.getCurrentYear()) + 1);
    String yearOfBirth = String.valueOf(Integer.parseInt(Utilities.getCurrentYear()) - 20);
    String currentDay = Utilities.getCurrentDay();
    String firstName=  Utilities.generateFirstName();
    String lastName=  Utilities.generateLastName();
    String companyName = userName+ " Company";
    String address = Utilities.generateAddress();
    String address2 = Utilities.generateAddress2();
    String state = Utilities.generateState();
    String city = Utilities.generateCity();
    String zip = Utilities.generateZip();
    String mobileNumber = Utilities.generateMobile();
    String title = "Mr.";
    String country = "India";
    String itemName= "Fancy Green Top";
    String expectedProductLink = HomePage.baseUrl+"product_details/8";

    List<String> textFieldList = Arrays.asList(LoginSignUpPage.passwordFieldLabel, LoginSignUpPage.firstNameFieldLabel, LoginSignUpPage.lastNameFieldLabel,
            LoginSignUpPage.companyFieldLabel, LoginSignUpPage.addressFieldLabel, LoginSignUpPage.address2FieldLabel, LoginSignUpPage.stateFieldLabel,
            LoginSignUpPage.cityFieldLabel, LoginSignUpPage.zipCodeFieldLabel, LoginSignUpPage.mobileNumberFieldLabel);
    List<String> fieldValue = Arrays.asList(Utilities.generatePassword(),  firstName,  lastName, companyName, address, address2, state, city, zip, mobileNumber);
    List<String> expectedAddressValues = Arrays.asList(title+" "+firstName+" "+lastName, companyName, address, address2, city+" "+state+" "+zip,country, mobileNumber);
    List<String> expectedCartTableValueList  = Arrays.asList("Women > Tops", "Rs. 700", "1", "Rs. 700");

    @Test(groups = {"coreTests"})
    void Test001_002_validateUserLandedOnProperBaseUrl() {
        homePage.dismissCookieConsentIfVisible();  // 👈 Add here at the beginning

        ExtentTestManager.getTest().log(Status.INFO, "Start: validate user navigated to url 'http://automationexercise.com'");
        assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl), true, "Base Url '"+ 
                HomePage.baseUrl +"' is not loaded. Currently loaded url is '"+homePage.getCurrentURL() +"'");
        ExtentTestManager.getTest().log(Status.INFO, "End: validate user navigated to url 'http://automationexercise.com'");
    }


    @Test(groups = {"coreTests"})
    void Test003_validateHomePageIsLoaded() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify that home page is visible successfully");
        assertion.assertEquals(homePage.getTabAttribute(HomePage.homeTabLabel, "style"), "color: orange;",  HomePage.homeTabLabel
                + "' page is not loaded");
        ExtentTestManager.getTest().log(Status.INFO, "End: Verify that home page is visible successfully");
    }

    @Test(groups = {"coreTests"})
    void Test004_validateAddProductsToCart() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify Add products to cart");
        homePage.clickOnAddToCartButtonForSpecificItem(itemName);
        assertion.assertEquals(homePage.getTextFromModal(HomePage.cartModalDivID, HomePage.h4Tag), "Added!",  "'Added!' text is not displayed");
        assertion.assertEquals(homePage.getTextFromModal(HomePage.cartModalDivID, HomePage.pTag), "Your product has been added to cart.",  "'Your product has been added to cart.' text is not displayed");
        ExtentTestManager.getTest().log(Status.INFO, "End: Verify Add products to cart");
    }

    @Test(groups = {"coreTests"})
    void Test005_006_validateViewCart() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify click on View Cart");
        homePage.clickOnElementWithTagName(HomePage.uTag, HomePage.viewCartButtonLabel,true);
        ExtentTestManager.getTest().log(Status.INFO, "End: Verify click on View Cart");
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify  cart page is displayed");
        assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl+CartPage.viewCartUrlextention), true, "Cart Url '"+
                HomePage.baseUrl+CartPage.viewCartUrlextention +"' is not loaded. Currently loaded url is '"+homePage.getCurrentURL() +"'");
        assertion.assertEquals(homePage.getTabAttribute(HomePage.cartTabLabel, "style"), "color: orange;",  HomePage.cartTabLabel
                + "' page is not loaded");
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify  cart page is displayed");
    }

    @Test(groups = {"coreTests"})
    void Test007_validateProceedTOCheckOutWithoutLogin() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify click on Proceed To Checkout");
        homePage.clickOnButton(CartPage.proceedToCheckoutButtonLabel, false);
        ExtentTestManager.getTest().log(Status.INFO, "End: Verify click on Proceed To Checkout");
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify checkout modal is displayed");
        assertion.assertEquals(homePage.getTextFromModal(CartPage.checOutModalDivID, HomePage.h4Tag), "Checkout",  "'Checkout' text is not displayed");
        assertion.assertEquals(homePage.getTextFromModal(CartPage.checOutModalDivID, HomePage.pTag), "Register / Login account to proceed on checkout.",  "'Register / Login account to proceed on checkout.' is not displayed");
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify checkout modal is displayed");
    }

    @Test(groups = {"coreTests"})
    void Test008_validateClickOnRegisterLogin() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify click on Register / Login");
        homePage.clickOnElementWithTagName(HomePage.uTag, CartPage.registerLoginButtonLabel,true);
        ExtentTestManager.getTest().log(Status.INFO, "End: Verify click on Register / Login");
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify Register / Login page is displayed");
        assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl+LoginSignUpPage.loginUrlextention), true,
                HomePage.baseUrl+LoginSignUpPage.loginUrlextention +"' url is not loaded. Currently loaded url is '"+homePage.getCurrentURL() +"'");
        assertion.assertEquals(homePage.getTabAttribute(HomePage.signUpLoginTabLabel, "style"), "color: orange;",  HomePage.signUpLoginTabLabel
                + "' page is not loaded");
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify Register / Login page is displayed");
    }

    @Test(groups = {"coreTests"})
    void Test009_validateSignUpAndCreateAccount() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Verify New User Signup!");

        // Step 1: Fill name and email
        loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.newUserSignupText, LoginSignUpPage.nameFieldPlaceholderText, userName);
        loginSignUpPage.setTextInSpecificFieldWithPalceHolder(LoginSignUpPage.newUserSignupText, LoginSignUpPage.emailAddressFieldPlaceholderText, emailAddress);
        homePage.clickOnButton(LoginSignUpPage.signUpButtonLabel, false);

        WebDriver driver = homePage.getDriver();

        // Wait for the form to load
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(8));
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("id_gender1")));

        assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl + LoginSignUpPage.signupUrlextention), true,
                "Redirection failed. Current URL: " + homePage.getCurrentURL());

        // Fill the form
        driver.findElement(By.id("id_gender1")).click();
        driver.findElement(By.id("password")).sendKeys(Utilities.generatePassword());

        // Convert numeric month to full month name
        String monthName = Month.of(Integer.parseInt(currentMonth)).getDisplayName(TextStyle.FULL, Locale.ENGLISH);
        new Select(driver.findElement(By.id("days"))).selectByVisibleText(currentDay);
        new Select(driver.findElement(By.id("months"))).selectByVisibleText(monthName);
        new Select(driver.findElement(By.id("years"))).selectByVisibleText(yearOfBirth);

        // Checkboxes
        WebElement newsletterCheckbox = driver.findElement(By.id("newsletter"));
        if (!newsletterCheckbox.isSelected()) newsletterCheckbox.click();
        WebElement optinCheckbox = driver.findElement(By.id("optin"));
        if (!optinCheckbox.isSelected()) optinCheckbox.click();

        // Address info
        driver.findElement(By.id("first_name")).sendKeys(firstName);
        driver.findElement(By.id("last_name")).sendKeys(lastName);
        driver.findElement(By.id("company")).sendKeys(companyName);
        driver.findElement(By.id("address1")).sendKeys(address);
        driver.findElement(By.id("address2")).sendKeys(address2);
        new Select(driver.findElement(By.id("country"))).selectByVisibleText(country);
        driver.findElement(By.id("state")).sendKeys(state);
        driver.findElement(By.id("city")).sendKeys(city);
        driver.findElement(By.id("zipcode")).sendKeys(zip);
        driver.findElement(By.id("mobile_number")).sendKeys(mobileNumber);

        // Submit
        driver.findElement(By.cssSelector("button[data-qa='create-account']")).click();

        ExtentTestManager.getTest().log(Status.INFO, "End: ENTER ACCOUNT & ADDRESS INFORMATION");
    }






    @Test(groups = {"coreTests"})
    void Test010_validateAccountIsCreated() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Validate ACCOUNT is Created");

        System.out.println("🔍 Checking if 'Account Created' URL is loaded...");
        String expectedUrl = HomePage.baseUrl + LoginSignUpPage.accountCreatedUrlextention;
        String actualUrl = homePage.getCurrentURL();
        System.out.println("🔗 Expected: " + expectedUrl);
        System.out.println("🔗 Actual: " + actualUrl);
        assertion.assertEquals(homePage.isProperUrlLoaded(expectedUrl), true,
                "❌ URL mismatch: Expected '" + expectedUrl + "' but got '" + actualUrl + "'");

        System.out.println("🔍 Verifying bold confirmation text...");
        String actualBText = homePage.getTextFromModal(LoginSignUpPage.formSectionID, HomePage.bTag);
        System.out.println("✅ Found <b> tag text: " + actualBText);
        assertion.assertEquals(actualBText, "ACCOUNT CREATED!", "❌ 'ACCOUNT CREATED!' text is missing");

        System.out.println("🔍 Verifying paragraph confirmation message...");
        String actualPText = homePage.getTextFromModal(LoginSignUpPage.formSectionID, HomePage.pTag);
        System.out.println("✅ Found <p> tag text: " + actualPText);
        assertion.assertEquals(actualPText, "Congratulations! Your new account has been successfully created!",
                "❌ 'Congratulations!' message not found");

        ExtentTestManager.getTest().log(Status.INFO, "End: Validate ACCOUNT is Created");

        // Step before next action
        System.out.println("🕒 Pausing for 5 seconds before clicking Continue...");
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        ExtentTestManager.getTest().log(Status.INFO, "Start: Validate click on Continue button");
        System.out.println("🖱️ Clicking on 'Continue' button...");
        homePage.clickOnButton(LoginSignUpPage.continueLabel, false);

        // Confirm redirection
        String newUrl = homePage.getCurrentURL();
        System.out.println("🔗 New redirected URL: " + newUrl);
        assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl), true,
                "❌ After clicking 'Continue', base URL not loaded. Got: '" + newUrl + "'");

        ExtentTestManager.getTest().log(Status.INFO, "End: Validate click on Continue button");
    }


    @Test(groups = {"coreTests"})
    void Test011_validateLoggedInUsername() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Validate Logged in as username' at top");
        assertion.assertEquals(homePage.getLoggedInUserName(), userName,  "Logged user name is not "+userName);
        ExtentTestManager.getTest().log(Status.INFO, "End: Validate Logged in as username' at top");
    }

    @Test(groups = {"coreTests"})
    void Test012_validateClickOnCartButton() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Click 'Cart' button");
        homePage.clickOnButton(HomePage.cartTabLabel, false);
        assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl+CartPage.viewCartUrlextention), true,
                HomePage.baseUrl+CartPage.viewCartUrlextention +"' is not loaded. Currently loaded url is '"+homePage.getCurrentURL() +"'");
        assertion.assertEquals(homePage.getTabAttribute(HomePage.cartTabLabel, "style"), "color: orange;",  HomePage.cartTabLabel
                + "' page is not loaded");
        ExtentTestManager.getTest().log(Status.INFO, "End: Click 'Cart' button");
    }

    @Test(groups = {"coreTests"})
    void Test013_validateClickOnProceedToCheckButton() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Click 'Proceed To Check' button");
        homePage.clickOnButton(CartPage.proceedToCheckoutButtonLabel, false);
        assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl+CartPage.checkoutUrlextention), true,
                HomePage.baseUrl+CartPage.checkoutUrlextention +"' is not loaded. Currently loaded url is '"+homePage.getCurrentURL() +"'");
        assertion.assertEquals(homePage.getTabAttribute(HomePage.cartTabLabel, "style"), "color: orange;",  HomePage.cartTabLabel
                + "' page is not loaded");
        ExtentTestManager.getTest().log(Status.INFO, "End: Click 'Proceed To Check' button");
    }

    @Test(groups = {"coreTests"})
    void Test014_validateAddressDetailsAndReviewOrder() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Validate DELIVERY Address Details");
        List <String> deliveryAddressValues = cartPage.getAllTextFromArea(CartPage.addressDeliveryDivID, HomePage.liTag);
        for (int i=1; i<deliveryAddressValues.size() ;i++) {
            assertion.assertEquals(deliveryAddressValues.get(i), expectedAddressValues.get(i-1),   deliveryAddressValues.get(i)+ " is shown instead of "+ expectedAddressValues.get(i-1));
        }
        ExtentTestManager.getTest().log(Status.INFO, "End:  Validate DELIVERY Address Details");

        ExtentTestManager.getTest().log(Status.INFO, "Start: Validate BILLING Address Details");
        List <String> billingAddressValues = cartPage.getAllTextFromArea(CartPage.addressInvoiceDivID, HomePage.liTag);
        for (int i=1; i<billingAddressValues.size() ;i++) {
            assertion.assertEquals(billingAddressValues.get(i), expectedAddressValues.get(i-1),   billingAddressValues.get(i)+ " is shown instead of "+ expectedAddressValues.get(i-1));
        }
        ExtentTestManager.getTest().log(Status.INFO, "End:  Validate BILLING Address Details");

        ExtentTestManager.getTest().log(Status.INFO, "Start: Validate Review Your Order");
        String actualValue;
        List<String> columnList = Arrays.asList(CartPage.descriptionColumnLabel, CartPage.priceColumnLabel, CartPage.quantityColumnLabel, CartPage.totalColumnLabel);
        actualValue = cartPage.getSpecificTableValue(CartPage.cartInfoDivID, CartPage.itemColumnLabel, itemName, "src");
        softAssert.assertEquals(actualValue, expectedProductLink, expectedProductLink+ " is not shown. Instead shown value is "+ actualValue);
        for (int i = 0; i < columnList.size(); i++) {
            actualValue = cartPage.getSpecificTableValue(CartPage.cartInfoDivID, columnList.get(i), itemName, "");
            softAssert.assertEquals(actualValue, expectedCartTableValueList.get(i), expectedCartTableValueList.get(i)+ " is not shown. Instead shown value is "+ actualValue);
        }
        ExtentTestManager.getTest().log(Status.INFO, "End: Validate Review Your Order");
    }

    @Test(groups = {"coreTests"})
    void Test015_validateEnterDescriptionAndPlaceOrder() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Enter description in comment text area and click 'Place Order'");

        WebDriver driver = homePage.getDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
            // Step 1: Wait for comment <textarea> and enter the comment
            WebElement commentBox = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("message")));
            commentBox.clear();  // Optional: clear existing text
            commentBox.sendKeys(commentForTextArea);
            System.out.println("✅ Comment entered: " + commentForTextArea);

            // Step 2: Locate "Place Order" button
            WebElement placeOrderBtn = wait.until(ExpectedConditions.elementToBeClickable(
                By.cssSelector("a.btn.btn-default.check_out[href='/payment']")
            ));

            // Step 3: Scroll into view (ensure visible in viewport)
            ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", placeOrderBtn);
            Thread.sleep(1000);  // Let scroll settle

            // Step 4: Click the button
            placeOrderBtn.click();
            System.out.println("✅ Clicked on 'Place Order' button");

            // Step 5: Validate URL redirection to /payment
            assertion.assertEquals(homePage.isProperUrlLoaded(HomePage.baseUrl + PaymentPage.paymentUrlextention), true,
                    "❌ Redirection to payment page failed. Current URL: " + homePage.getCurrentURL());

            ExtentTestManager.getTest().log(Status.INFO, "End: Enter description and click Place Order");

        } catch (Exception e) {
            captureScreenshot();
            ExtentTestManager.getTest().log(Status.FAIL, "❌ Failed to place order: " + e.getMessage());
            throw new RuntimeException("❌ Exception in Test015: " + e.getMessage(), e);
        }
    }


    @Test(groups = {"coreTests"})
    void Test016_017_018_validatePayConfirmAndSuccessOrder() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Enter payment details: Name on Card, Card Number, CVC, Expiration date");
        homePage.setTextInSpecificField(PaymentPage.nameOnCardFieldLabel, userName);
        homePage.setTextInSpecificField(PaymentPage.cardNumberFieldLabel, cardNumber);
        homePage.setTextInSpecificField(PaymentPage.cvcFieldLabel, cvcNumber);
        homePage.setTextInSpecificField(PaymentPage.expirationLabel, currentMonth);
        paymentPage.setTextInSpecificFieldInPaymentPage(PaymentPage.expirationLabel, cardExpirationYear);
        ExtentTestManager.getTest().log(Status.INFO, "End: Enter payment details: Name on Card, Card Number, CVC, Expiration date");

        ExtentTestManager.getTest().log(Status.INFO, "Start: Click 'Pay and Confirm Order' button");
        homePage.clickOnButton(PaymentPage.payAndConfirmOrderButtonLabel, false);
        ExtentTestManager.getTest().log(Status.INFO, "End: Click 'Pay and Confirm Order' button");

        ExtentTestManager.getTest().log(Status.INFO, "Start: Validate the success message 'Your order has been placed successfully!");
        assertion.assertEquals(homePage.getTextFromModal(PaymentPage.formSectionID, HomePage.pTag), "Congratulations! Your order has been confirmed!",
                "'Congratulations! Your order has been confirmed!' text is not displayed");
        assertion.assertEquals(homePage.getCurrentURL().contains(HomePage.baseUrl+PaymentPage.paymentDoneUrlextention), true,
                HomePage.baseUrl+PaymentPage.paymentDoneUrlextention +"' is not loaded. Currently loaded url is '"+homePage.getCurrentURL() +"'");
        ExtentTestManager.getTest().log(Status.INFO, "End: Validate the success message 'Your order has been placed successfully!");
    }

    @Test(enabled = false)
    void Test999_forceScreenshotFailureForDemo() {
        ExtentTestManager.getTest().log(Status.INFO, "Start: Forced failure test to demo screenshot capture");

        try {
            // Intentionally fail this test
            assertion.assertEquals("expected", "actual", "❌ Forced failure: Strings do not match");

        } catch (AssertionError e) {
            captureScreenshot();
            ExtentTestManager.getTest().log(Status.FAIL, "❌ Expected failure captured for demo: " + e.getMessage());
            throw e;  // rethrow to mark test as failed
        }

        ExtentTestManager.getTest().log(Status.INFO, "End: Forced failure test (this line won't be reached)");
    }



}





--------------------------------------------------------------------------------
FILE: src\testNg\Testsuite1.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Suite1" parallel="false" thread-count="1">
    <listeners>
        <listener class-name="modules.TestListener" />
    </listeners>

    <test name="Testcase Core Tests">
        <classes>
            <class name="tests.Testcase1" />
        </classes>
    </test>

    <test name="Signup With Excel">
        <classes>
            <class name="tests.SignupWithExcelTest" />
        </classes>
    </test>

    <test name="Product Listing Tests">
        <classes>
            <class name="tests.ProductListingTest" />
        </classes>
    </test>

    <test name="Subscription Tests">
        <classes>
            <class name="tests.SubscriptionTest" />
        </classes>
    </test>

    <test name="Account Deletion Test">
        <classes>
            <class name="tests.AccountDeletionTest" />
        </classes>
    </test>

    <test name="Contact Us Test">
        <classes>
            <class name="tests.ContactUsTest" />
        </classes>
    </test>
</suite>




--------------------------------------------------------------------------------
FILE: target\classes\log4j2.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
        <File name="File" fileName="logs/automation.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n"/>
        </File>
    </Appenders>
    <Loggers>
        <Root level="info">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Root>
    </Loggers>
</Configuration>




--------------------------------------------------------------------------------
FILE: target\maven-archiver\pom.properties
--------------------------------------------------------------------------------

artifactId=automationexercise
groupId=org.example
version=1.0-SNAPSHOT




--------------------------------------------------------------------------------
FILE: target\surefire-reports\TEST-TestSuite.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="TestSuite" time="92.086" tests="23" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="24"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\ASUS\Desktop\GOURI-BHASKAR\AutomationExercisee\target\test-classes;C:\Users\ASUS\Desktop\GOURI-BHASKAR\AutomationExercisee\target\classes;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-java\4.11.0\selenium-java-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-api\4.11.0\selenium-api-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\4.11.0\selenium-chrome-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\com\google\auto\service\auto-service-annotations\1.0.1\auto-service-annotations-1.0.1.jar;C:\Users\ASUS\.m2\repository\com\google\guava\guava\31.1-jre\guava-31.1-jre.jar;C:\Users\ASUS\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\ASUS\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\ASUS\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\ASUS\.m2\repository\org\checkerframework\checker-qual\3.12.0\checker-qual-3.12.0.jar;C:\Users\ASUS\.m2\repository\com\google\errorprone\error_prone_annotations\2.11.0\error_prone_annotations-2.11.0.jar;C:\Users\ASUS\.m2\repository\com\google\j2objc\j2objc-annotations\1.3\j2objc-annotations-1.3.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-chromium-driver\4.11.0\selenium-chromium-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-json\4.11.0\selenium-json-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-manager\4.11.0\selenium-manager-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v113\4.11.0\selenium-devtools-v113-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v114\4.11.0\selenium-devtools-v114-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v115\4.11.0\selenium-devtools-v115-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v85\4.11.0\selenium-devtools-v85-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\4.11.0\selenium-edge-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\4.11.0\selenium-firefox-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-http\4.11.0\selenium-http-4.11.0.jar;C:\Users\ASUS\.m2\repository\dev\failsafe\failsafe\3.3.1\failsafe-3.3.1.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\4.11.0\selenium-ie-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\4.11.0\selenium-remote-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-buffer\4.1.92.Final\netty-buffer-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-codec-http\4.1.92.Final\netty-codec-http-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-codec\4.1.92.Final\netty-codec-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-handler\4.1.92.Final\netty-handler-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-common\4.1.92.Final\netty-common-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-classes-epoll\4.1.92.Final\netty-transport-classes-epoll-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-classes-kqueue\4.1.92.Final\netty-transport-classes-kqueue-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-epoll\4.1.92.Final\netty-transport-native-epoll-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.92.Final\netty-transport-native-kqueue-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-unix-common\4.1.92.Final\netty-transport-native-unix-common-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport\4.1.92.Final\netty-transport-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-resolver\4.1.92.Final\netty-resolver-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-api\1.26.0\opentelemetry-api-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-context\1.26.0\opentelemetry-context-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-exporter-logging\1.26.0\opentelemetry-exporter-logging-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-metrics\1.26.0\opentelemetry-sdk-metrics-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-extension-incubator\1.26.0-alpha\opentelemetry-extension-incubator-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-logs\1.26.0-alpha\opentelemetry-sdk-logs-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-api-logs\1.26.0-alpha\opentelemetry-api-logs-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-api-events\1.26.0-alpha\opentelemetry-api-events-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-common\1.26.0\opentelemetry-sdk-common-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure-spi\1.26.0\opentelemetry-sdk-extension-autoconfigure-spi-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure\1.26.0-alpha\opentelemetry-sdk-extension-autoconfigure-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-trace\1.26.0\opentelemetry-sdk-trace-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk\1.26.0\opentelemetry-sdk-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-semconv\1.26.0-alpha\opentelemetry-semconv-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\net\bytebuddy\byte-buddy\1.14.4\byte-buddy-1.14.4.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar;C:\Users\ASUS\.m2\repository\org\asynchttpclient\async-http-client\2.12.3\async-http-client-2.12.3.jar;C:\Users\ASUS\.m2\repository\org\asynchttpclient\async-http-client-netty-utils\2.12.3\async-http-client-netty-utils-2.12.3.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-codec-socks\4.1.60.Final\netty-codec-socks-4.1.60.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-handler-proxy\4.1.60.Final\netty-handler-proxy-4.1.60.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-epoll\4.1.60.Final\netty-transport-native-epoll-4.1.60.Final-linux-x86_64.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.60.Final\netty-transport-native-kqueue-4.1.60.Final-osx-x86_64.jar;C:\Users\ASUS\.m2\repository\org\reactivestreams\reactive-streams\1.0.3\reactive-streams-1.0.3.jar;C:\Users\ASUS\.m2\repository\com\typesafe\netty\netty-reactive-streams\2.0.4\netty-reactive-streams-2.0.4.jar;C:\Users\ASUS\.m2\repository\com\sun\activation\jakarta.activation\1.2.2\jakarta.activation-1.2.2.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\4.11.0\selenium-safari-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-support\4.11.0\selenium-support-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\apache\poi\poi\5.2.3\poi-5.2.3.jar;C:\Users\ASUS\.m2\repository\commons-codec\commons-codec\1.15\commons-codec-1.15.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-collections4\4.4\commons-collections4-4.4.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;C:\Users\ASUS\.m2\repository\com\zaxxer\SparseBitSet\1.2\SparseBitSet-1.2.jar;C:\Users\ASUS\.m2\repository\org\apache\poi\poi-ooxml\5.2.3\poi-ooxml-5.2.3.jar;C:\Users\ASUS\.m2\repository\org\apache\poi\poi-ooxml-lite\5.2.3\poi-ooxml-lite-5.2.3.jar;C:\Users\ASUS\.m2\repository\org\apache\xmlbeans\xmlbeans\5.1.1\xmlbeans-5.1.1.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-compress\1.21\commons-compress-1.21.jar;C:\Users\ASUS\.m2\repository\com\github\virtuald\curvesapi\1.07\curvesapi-1.07.jar;C:\Users\ASUS\.m2\repository\org\json\json\20230227\json-20230227.jar;C:\Users\ASUS\.m2\repository\org\testng\testng\7.8.0\testng-7.8.0.jar;C:\Users\ASUS\.m2\repository\com\beust\jcommander\1.82\jcommander-1.82.jar;C:\Users\ASUS\.m2\repository\org\webjars\jquery\3.6.1\jquery-3.6.1.jar;C:\Users\ASUS\.m2\repository\org\slf4j\slf4j-api\2.0.7\slf4j-api-2.0.7.jar;C:\Users\ASUS\.m2\repository\org\apache\logging\log4j\log4j-api\2.20.0\log4j-api-2.20.0.jar;C:\Users\ASUS\.m2\repository\org\apache\logging\log4j\log4j-core\2.20.0\log4j-core-2.20.0.jar;C:\Users\ASUS\.m2\repository\org\apache\logging\log4j\log4j-slf4j2-impl\2.20.0\log4j-slf4j2-impl-2.20.0.jar;C:\Users\ASUS\.m2\repository\commons-io\commons-io\2.12.0\commons-io-2.12.0.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-lang3\3.12.0\commons-lang3-3.12.0.jar;C:\Users\ASUS\.m2\repository\com\aventstack\extentreports\4.0.9\extentreports-4.0.9.jar;C:\Users\ASUS\.m2\repository\org\freemarker\freemarker\2.3.23\freemarker-2.3.23.jar;C:\Users\ASUS\.m2\repository\org\mongodb\mongodb-driver\3.3.0\mongodb-driver-3.3.0.jar;C:\Users\ASUS\.m2\repository\org\mongodb\mongodb-driver-core\3.3.0\mongodb-driver-core-3.3.0.jar;C:\Users\ASUS\.m2\repository\org\mongodb\bson\3.3.0\bson-3.3.0.jar;C:\Users\ASUS\.m2\repository\org\apache\httpcomponents\httpclient\4.5.2\httpclient-4.5.2.jar;C:\Users\ASUS\.m2\repository\org\apache\httpcomponents\httpcore\4.4.4\httpcore-4.4.4.jar;C:\Users\ASUS\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\ASUS\.m2\repository\org\apache\httpcomponents\httpmime\4.5.2\httpmime-4.5.2.jar;C:\Users\ASUS\.m2\repository\com\google\code\gson\gson\2.8.5\gson-2.8.5.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Europe/London"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="24"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="IN"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-24\bin"/>
    <property name="sun.java.command" value="C:\Users\ASUS\AppData\Local\Temp\surefire9005286940105138696\surefirebooter-20250517155435650_3.jar C:\Users\ASUS\AppData\Local\Temp\surefire9005286940105138696 2025-05-17T15-54-35_526-jvmRun1 surefire-20250517155435650_1tmp surefire_0-20250517155435650_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\ASUS\Desktop\GOURI-BHASKAR\AutomationExercisee\target\test-classes;C:\Users\ASUS\Desktop\GOURI-BHASKAR\AutomationExercisee\target\classes;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-java\4.11.0\selenium-java-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-api\4.11.0\selenium-api-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\4.11.0\selenium-chrome-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\com\google\auto\service\auto-service-annotations\1.0.1\auto-service-annotations-1.0.1.jar;C:\Users\ASUS\.m2\repository\com\google\guava\guava\31.1-jre\guava-31.1-jre.jar;C:\Users\ASUS\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\ASUS\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\ASUS\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\ASUS\.m2\repository\org\checkerframework\checker-qual\3.12.0\checker-qual-3.12.0.jar;C:\Users\ASUS\.m2\repository\com\google\errorprone\error_prone_annotations\2.11.0\error_prone_annotations-2.11.0.jar;C:\Users\ASUS\.m2\repository\com\google\j2objc\j2objc-annotations\1.3\j2objc-annotations-1.3.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-chromium-driver\4.11.0\selenium-chromium-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-json\4.11.0\selenium-json-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-manager\4.11.0\selenium-manager-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v113\4.11.0\selenium-devtools-v113-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v114\4.11.0\selenium-devtools-v114-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v115\4.11.0\selenium-devtools-v115-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v85\4.11.0\selenium-devtools-v85-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\4.11.0\selenium-edge-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\4.11.0\selenium-firefox-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-http\4.11.0\selenium-http-4.11.0.jar;C:\Users\ASUS\.m2\repository\dev\failsafe\failsafe\3.3.1\failsafe-3.3.1.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\4.11.0\selenium-ie-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\4.11.0\selenium-remote-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-buffer\4.1.92.Final\netty-buffer-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-codec-http\4.1.92.Final\netty-codec-http-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-codec\4.1.92.Final\netty-codec-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-handler\4.1.92.Final\netty-handler-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-common\4.1.92.Final\netty-common-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-classes-epoll\4.1.92.Final\netty-transport-classes-epoll-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-classes-kqueue\4.1.92.Final\netty-transport-classes-kqueue-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-epoll\4.1.92.Final\netty-transport-native-epoll-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.92.Final\netty-transport-native-kqueue-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-unix-common\4.1.92.Final\netty-transport-native-unix-common-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport\4.1.92.Final\netty-transport-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-resolver\4.1.92.Final\netty-resolver-4.1.92.Final.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-api\1.26.0\opentelemetry-api-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-context\1.26.0\opentelemetry-context-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-exporter-logging\1.26.0\opentelemetry-exporter-logging-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-metrics\1.26.0\opentelemetry-sdk-metrics-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-extension-incubator\1.26.0-alpha\opentelemetry-extension-incubator-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-logs\1.26.0-alpha\opentelemetry-sdk-logs-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-api-logs\1.26.0-alpha\opentelemetry-api-logs-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-api-events\1.26.0-alpha\opentelemetry-api-events-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-common\1.26.0\opentelemetry-sdk-common-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure-spi\1.26.0\opentelemetry-sdk-extension-autoconfigure-spi-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure\1.26.0-alpha\opentelemetry-sdk-extension-autoconfigure-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk-trace\1.26.0\opentelemetry-sdk-trace-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-sdk\1.26.0\opentelemetry-sdk-1.26.0.jar;C:\Users\ASUS\.m2\repository\io\opentelemetry\opentelemetry-semconv\1.26.0-alpha\opentelemetry-semconv-1.26.0-alpha.jar;C:\Users\ASUS\.m2\repository\net\bytebuddy\byte-buddy\1.14.4\byte-buddy-1.14.4.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar;C:\Users\ASUS\.m2\repository\org\asynchttpclient\async-http-client\2.12.3\async-http-client-2.12.3.jar;C:\Users\ASUS\.m2\repository\org\asynchttpclient\async-http-client-netty-utils\2.12.3\async-http-client-netty-utils-2.12.3.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-codec-socks\4.1.60.Final\netty-codec-socks-4.1.60.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-handler-proxy\4.1.60.Final\netty-handler-proxy-4.1.60.Final.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-epoll\4.1.60.Final\netty-transport-native-epoll-4.1.60.Final-linux-x86_64.jar;C:\Users\ASUS\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.60.Final\netty-transport-native-kqueue-4.1.60.Final-osx-x86_64.jar;C:\Users\ASUS\.m2\repository\org\reactivestreams\reactive-streams\1.0.3\reactive-streams-1.0.3.jar;C:\Users\ASUS\.m2\repository\com\typesafe\netty\netty-reactive-streams\2.0.4\netty-reactive-streams-2.0.4.jar;C:\Users\ASUS\.m2\repository\com\sun\activation\jakarta.activation\1.2.2\jakarta.activation-1.2.2.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\4.11.0\selenium-safari-driver-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\seleniumhq\selenium\selenium-support\4.11.0\selenium-support-4.11.0.jar;C:\Users\ASUS\.m2\repository\org\apache\poi\poi\5.2.3\poi-5.2.3.jar;C:\Users\ASUS\.m2\repository\commons-codec\commons-codec\1.15\commons-codec-1.15.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-collections4\4.4\commons-collections4-4.4.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;C:\Users\ASUS\.m2\repository\com\zaxxer\SparseBitSet\1.2\SparseBitSet-1.2.jar;C:\Users\ASUS\.m2\repository\org\apache\poi\poi-ooxml\5.2.3\poi-ooxml-5.2.3.jar;C:\Users\ASUS\.m2\repository\org\apache\poi\poi-ooxml-lite\5.2.3\poi-ooxml-lite-5.2.3.jar;C:\Users\ASUS\.m2\repository\org\apache\xmlbeans\xmlbeans\5.1.1\xmlbeans-5.1.1.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-compress\1.21\commons-compress-1.21.jar;C:\Users\ASUS\.m2\repository\com\github\virtuald\curvesapi\1.07\curvesapi-1.07.jar;C:\Users\ASUS\.m2\repository\org\json\json\20230227\json-20230227.jar;C:\Users\ASUS\.m2\repository\org\testng\testng\7.8.0\testng-7.8.0.jar;C:\Users\ASUS\.m2\repository\com\beust\jcommander\1.82\jcommander-1.82.jar;C:\Users\ASUS\.m2\repository\org\webjars\jquery\3.6.1\jquery-3.6.1.jar;C:\Users\ASUS\.m2\repository\org\slf4j\slf4j-api\2.0.7\slf4j-api-2.0.7.jar;C:\Users\ASUS\.m2\repository\org\apache\logging\log4j\log4j-api\2.20.0\log4j-api-2.20.0.jar;C:\Users\ASUS\.m2\repository\org\apache\logging\log4j\log4j-core\2.20.0\log4j-core-2.20.0.jar;C:\Users\ASUS\.m2\repository\org\apache\logging\log4j\log4j-slf4j2-impl\2.20.0\log4j-slf4j2-impl-2.20.0.jar;C:\Users\ASUS\.m2\repository\commons-io\commons-io\2.12.0\commons-io-2.12.0.jar;C:\Users\ASUS\.m2\repository\org\apache\commons\commons-lang3\3.12.0\commons-lang3-3.12.0.jar;C:\Users\ASUS\.m2\repository\com\aventstack\extentreports\4.0.9\extentreports-4.0.9.jar;C:\Users\ASUS\.m2\repository\org\freemarker\freemarker\2.3.23\freemarker-2.3.23.jar;C:\Users\ASUS\.m2\repository\org\mongodb\mongodb-driver\3.3.0\mongodb-driver-3.3.0.jar;C:\Users\ASUS\.m2\repository\org\mongodb\mongodb-driver-core\3.3.0\mongodb-driver-core-3.3.0.jar;C:\Users\ASUS\.m2\repository\org\mongodb\bson\3.3.0\bson-3.3.0.jar;C:\Users\ASUS\.m2\repository\org\apache\httpcomponents\httpclient\4.5.2\httpclient-4.5.2.jar;C:\Users\ASUS\.m2\repository\org\apache\httpcomponents\httpcore\4.4.4\httpcore-4.4.4.jar;C:\Users\ASUS\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\ASUS\.m2\repository\org\apache\httpcomponents\httpmime\4.5.2\httpmime-4.5.2.jar;C:\Users\ASUS\.m2\repository\com\google\code\gson\gson\2.8.5\gson-2.8.5.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\ASUS"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-24"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\ASUS\Desktop\GOURI-BHASKAR\AutomationExercisee"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\ASUS\AppData\Local\Temp\surefire9005286940105138696\surefirebooter-20250517155435650_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="24.0.1+9-30"/>
    <property name="user.name" value="ASUS"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\ASUS\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\ASUS\AppData\Local\Temp\"/>
    <property name="java.version" value="24.0.1"/>
    <property name="user.dir" value="C:\Users\ASUS\Desktop\GOURI-BHASKAR\AutomationExercisee"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-24\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\java8path;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Apache\apache-maven-3.9.9\bin;C:\Program Files\Apache\apache-maven-3.9.9\bin\bin;C:\Users\ASUS\AppData\Local\Microsoft\WindowsApps;C:\Users\ASUS\AppData\Local\Programs\Microsoft VS Code\bin;c:\Users\ASUS\.vscode\extensions\ms-python.debugpy-2025.8.0-win32-x64\bundled\scripts\noConfigScripts;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="24.0.1+9-30"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="68.0"/>
  </properties>
  <testcase name="Test001_002_validateUserLandedOnProperBaseUrl" classname="tests.Testcase1" time="0.725">
    <system-out><![CDATA[*** Test Suite Surefire test started ***
*** Running test method Test001_002_validateUserLandedOnProperBaseUrl...
Directory: C:\Users\ASUS\Desktop\GOURI-BHASKAR\AutomationExercisee\Reports\Report_2025_05_17_15_54_41 is created!
✅ Cookie consent popup dismissed.
]]></system-out>
    <system-err><![CDATA[May 17, 2025 3:54:40 PM org.openqa.selenium.devtools.CdpVersionFinder findNearestMatch
WARNING: Unable to find CDP implementation matching 136
May 17, 2025 3:54:40 PM org.openqa.selenium.chromium.ChromiumDriver lambda$new$5
WARNING: Unable to find version of CDP to use for 136.0.7103.114. You may need to include a dependency on a specific version of the CDP using something similar to `org.seleniumhq.selenium:selenium-devtools-v86:4.11.0` where the version ("v86") matches the version of the chromium-based browser you're using and the version number of the artifact is the same as Selenium's.
]]></system-err>
  </testcase>
  <testcase name="Test003_validateHomePageIsLoaded" classname="tests.Testcase1" time="0.057">
    <system-out><![CDATA[*** Executed Test001_002_validateUserLandedOnProperBaseUrl test successfully...
*** Running test method Test003_validateHomePageIsLoaded...
]]></system-out>
  </testcase>
  <testcase name="Test004_validateAddProductsToCart" classname="tests.Testcase1" time="2.052">
    <system-out><![CDATA[*** Executed Test003_validateHomePageIsLoaded test successfully...
*** Running test method Test004_validateAddProductsToCart...
]]></system-out>
  </testcase>
  <testcase name="Test005_006_validateViewCart" classname="tests.Testcase1" time="0.508">
    <system-out><![CDATA[*** Executed Test004_validateAddProductsToCart test successfully...
*** Running test method Test005_006_validateViewCart...
]]></system-out>
  </testcase>
  <testcase name="Test007_validateProceedTOCheckOutWithoutLogin" classname="tests.Testcase1" time="0.329">
    <system-out><![CDATA[*** Executed Test005_006_validateViewCart test successfully...
*** Running test method Test007_validateProceedTOCheckOutWithoutLogin...
]]></system-out>
  </testcase>
  <testcase name="Test008_validateClickOnRegisterLogin" classname="tests.Testcase1" time="0.467">
    <system-out><![CDATA[*** Executed Test007_validateProceedTOCheckOutWithoutLogin test successfully...
*** Running test method Test008_validateClickOnRegisterLogin...
]]></system-out>
  </testcase>
  <testcase name="Test009_validateSignUpAndCreateAccount" classname="tests.Testcase1" time="4.229">
    <system-out><![CDATA[*** Executed Test008_validateClickOnRegisterLogin test successfully...
*** Running test method Test009_validateSignUpAndCreateAccount...
]]></system-out>
  </testcase>
  <testcase name="Test010_validateAccountIsCreated" classname="tests.Testcase1" time="6.803">
    <system-out><![CDATA[*** Executed Test009_validateSignUpAndCreateAccount test successfully...
*** Running test method Test010_validateAccountIsCreated...
🔍 Checking if 'Account Created' URL is loaded...
🔗 Expected: https://www.automationexercise.com/account_created
🔗 Actual: https://www.automationexercise.com/account_created
🔍 Verifying bold confirmation text...
✅ Found <b> tag text: ACCOUNT CREATED!
🔍 Verifying paragraph confirmation message...
✅ Found <p> tag text: Congratulations! Your new account has been successfully created!
🕒 Pausing for 5 seconds before clicking Continue...
🖱️ Clicking on 'Continue' button...
🔗 New redirected URL: https://www.automationexercise.com/
]]></system-out>
  </testcase>
  <testcase name="Test011_validateLoggedInUsername" classname="tests.Testcase1" time="0.092">
    <system-out><![CDATA[*** Executed Test010_validateAccountIsCreated test successfully...
*** Running test method Test011_validateLoggedInUsername...
]]></system-out>
  </testcase>
  <testcase name="Test012_validateClickOnCartButton" classname="tests.Testcase1" time="1.251">
    <system-out><![CDATA[*** Executed Test011_validateLoggedInUsername test successfully...
*** Running test method Test012_validateClickOnCartButton...
]]></system-out>
  </testcase>
  <testcase name="Test013_validateClickOnProceedToCheckButton" classname="tests.Testcase1" time="1.129">
    <system-out><![CDATA[*** Executed Test012_validateClickOnCartButton test successfully...
*** Running test method Test013_validateClickOnProceedToCheckButton...
]]></system-out>
  </testcase>
  <testcase name="Test014_validateAddressDetailsAndReviewOrder" classname="tests.Testcase1" time="0.405">
    <system-out><![CDATA[*** Executed Test013_validateClickOnProceedToCheckButton test successfully...
*** Running test method Test014_validateAddressDetailsAndReviewOrder...
]]></system-out>
  </testcase>
  <testcase name="Test015_validateEnterDescriptionAndPlaceOrder" classname="tests.Testcase1" time="2.173">
    <system-out><![CDATA[*** Executed Test014_validateAddressDetailsAndReviewOrder test successfully...
*** Running test method Test015_validateEnterDescriptionAndPlaceOrder...
✅ Comment entered: hello, make burger extra spicy 2025_5_17_15_54_36
✅ Clicked on 'Place Order' button
]]></system-out>
  </testcase>
  <testcase name="Test016_017_018_validatePayConfirmAndSuccessOrder" classname="tests.Testcase1" time="3.215">
    <system-out><![CDATA[*** Executed Test015_validateEnterDescriptionAndPlaceOrder test successfully...
*** Running test method Test016_017_018_validatePayConfirmAndSuccessOrder...
]]></system-out>
  </testcase>
  <testcase name="Test020_signupWithExcelData" classname="tests.SignupWithExcelTest" time="19.223">
    <system-out><![CDATA[*** Executed Test016_017_018_validatePayConfirmAndSuccessOrder test successfully...
*** Running test method Test020_signupWithExcelData...
ℹ️ Cookie consent popup not shown or already dismissed.
]]></system-out>
  </testcase>
  <testcase name="Test022_invalidLoginAfterLogout" classname="tests.SignupWithExcelTest" time="4.886">
    <system-out><![CDATA[*** Executed Test020_signupWithExcelData test successfully...
*** Running test method Test022_invalidLoginAfterLogout...
]]></system-out>
  </testcase>
  <testcase name="Test023_validLoginAfterInvalidAttempt" classname="tests.SignupWithExcelTest" time="9.49">
    <system-out><![CDATA[*** Executed Test022_invalidLoginAfterLogout test successfully...
*** Running test method Test023_validLoginAfterInvalidAttempt...
]]></system-out>
  </testcase>
  <testcase name="Test030_verifyProductListingAndSearchFeatures" classname="tests.ProductListingTest" time="12.923">
    <system-out><![CDATA[*** Executed Test023_validLoginAfterInvalidAttempt test successfully...
*** Running test method Test030_verifyProductListingAndSearchFeatures...
]]></system-out>
  </testcase>
  <testcase name="Test031_subscribeWithValidEmail" classname="tests.SubscriptionTest" time="0.211">
    <system-out><![CDATA[*** Executed Test030_verifyProductListingAndSearchFeatures test successfully...
*** Running test method Test031_subscribeWithValidEmail...
]]></system-out>
  </testcase>
  <testcase name="Test032_subscribeWithInvalidEmail" classname="tests.SubscriptionTest" time="2.187">
    <system-out><![CDATA[*** Executed Test031_subscribeWithValidEmail test successfully...
*** Running test method Test032_subscribeWithInvalidEmail...
]]></system-out>
  </testcase>
  <testcase name="Test033_subscribeWithDuplicateEmail" classname="tests.SubscriptionTest" time="2.226">
    <system-out><![CDATA[*** Executed Test032_subscribeWithInvalidEmail test successfully...
*** Running test method Test033_subscribeWithDuplicateEmail...
]]></system-out>
  </testcase>
  <testcase name="Test034_validateAccountDeletionAndRedirect" classname="tests.AccountDeletionTest" time="8.758">
    <system-out><![CDATA[*** Executed Test033_subscribeWithDuplicateEmail test successfully...
*** Running test method Test034_validateAccountDeletionAndRedirect...
]]></system-out>
  </testcase>
  <testcase name="Test035_validateContactUsFormSubmission" classname="tests.ContactUsTest" time="1.377">
    <system-out><![CDATA[*** Executed Test034_validateAccountDeletionAndRedirect test successfully...
*** Running test method Test035_validateContactUsFormSubmission...
]]></system-out>
  </testcase>
</testsuite>



--------------------------------------------------------------------------------
FILE: target\surefire-reports\testng-results.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="23" passed="23" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-17T15:54:41 BST" name="Surefire suite" finished-at="2025-05-17T15:56:06 BST" duration-ms="85008">
    <groups>
      <group name="coreTests">
        <method signature="Testcase1.Test001_002_validateUserLandedOnProperBaseUrl()[pri:0, instance:tests.Testcase1@35229f85]" name="Test001_002_validateUserLandedOnProperBaseUrl" class="tests.Testcase1"/>
        <method signature="Testcase1.Test003_validateHomePageIsLoaded()[pri:0, instance:tests.Testcase1@35229f85]" name="Test003_validateHomePageIsLoaded" class="tests.Testcase1"/>
        <method signature="Testcase1.Test004_validateAddProductsToCart()[pri:0, instance:tests.Testcase1@35229f85]" name="Test004_validateAddProductsToCart" class="tests.Testcase1"/>
        <method signature="Testcase1.Test005_006_validateViewCart()[pri:0, instance:tests.Testcase1@35229f85]" name="Test005_006_validateViewCart" class="tests.Testcase1"/>
        <method signature="Testcase1.Test007_validateProceedTOCheckOutWithoutLogin()[pri:0, instance:tests.Testcase1@35229f85]" name="Test007_validateProceedTOCheckOutWithoutLogin" class="tests.Testcase1"/>
        <method signature="Testcase1.Test008_validateClickOnRegisterLogin()[pri:0, instance:tests.Testcase1@35229f85]" name="Test008_validateClickOnRegisterLogin" class="tests.Testcase1"/>
        <method signature="Testcase1.Test009_validateSignUpAndCreateAccount()[pri:0, instance:tests.Testcase1@35229f85]" name="Test009_validateSignUpAndCreateAccount" class="tests.Testcase1"/>
        <method signature="Testcase1.Test010_validateAccountIsCreated()[pri:0, instance:tests.Testcase1@35229f85]" name="Test010_validateAccountIsCreated" class="tests.Testcase1"/>
        <method signature="Testcase1.Test011_validateLoggedInUsername()[pri:0, instance:tests.Testcase1@35229f85]" name="Test011_validateLoggedInUsername" class="tests.Testcase1"/>
        <method signature="Testcase1.Test012_validateClickOnCartButton()[pri:0, instance:tests.Testcase1@35229f85]" name="Test012_validateClickOnCartButton" class="tests.Testcase1"/>
        <method signature="Testcase1.Test013_validateClickOnProceedToCheckButton()[pri:0, instance:tests.Testcase1@35229f85]" name="Test013_validateClickOnProceedToCheckButton" class="tests.Testcase1"/>
        <method signature="Testcase1.Test014_validateAddressDetailsAndReviewOrder()[pri:0, instance:tests.Testcase1@35229f85]" name="Test014_validateAddressDetailsAndReviewOrder" class="tests.Testcase1"/>
        <method signature="Testcase1.Test015_validateEnterDescriptionAndPlaceOrder()[pri:0, instance:tests.Testcase1@35229f85]" name="Test015_validateEnterDescriptionAndPlaceOrder" class="tests.Testcase1"/>
        <method signature="Testcase1.Test016_017_018_validatePayConfirmAndSuccessOrder()[pri:0, instance:tests.Testcase1@35229f85]" name="Test016_017_018_validatePayConfirmAndSuccessOrder" class="tests.Testcase1"/>
      </group> <!-- coreTests -->
    </groups>
    <test started-at="2025-05-17T15:54:41 BST" name="Surefire test" finished-at="2025-05-17T15:56:06 BST" duration-ms="85008">
      <class name="tests.SubscriptionTest">
        <test-method signature="Test031_subscribeWithValidEmail()[pri:1004, instance:tests.SubscriptionTest@45fd9a4d]" started-at="2025-05-17T15:55:51 BST" name="Test031_subscribeWithValidEmail" finished-at="2025-05-17T15:55:52 BST" depends-on-methods="tests.ProductListingTest.Test030_verifyProductListingAndSearchFeatures" duration-ms="211" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test031_subscribeWithValidEmail -->
        <test-method signature="Test032_subscribeWithInvalidEmail()[pri:1005, instance:tests.SubscriptionTest@45fd9a4d]" started-at="2025-05-17T15:55:52 BST" name="Test032_subscribeWithInvalidEmail" finished-at="2025-05-17T15:55:54 BST" duration-ms="2188" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test032_subscribeWithInvalidEmail -->
        <test-method signature="Test033_subscribeWithDuplicateEmail()[pri:1006, instance:tests.SubscriptionTest@45fd9a4d]" started-at="2025-05-17T15:55:54 BST" name="Test033_subscribeWithDuplicateEmail" finished-at="2025-05-17T15:55:56 BST" duration-ms="2226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test033_subscribeWithDuplicateEmail -->
      </class> <!-- tests.SubscriptionTest -->
      <class name="tests.Testcase1">
        <test-method signature="Test001_002_validateUserLandedOnProperBaseUrl()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:41 BST" name="Test001_002_validateUserLandedOnProperBaseUrl" finished-at="2025-05-17T15:54:42 BST" duration-ms="908" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test001_002_validateUserLandedOnProperBaseUrl -->
        <test-method signature="Test003_validateHomePageIsLoaded()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:42 BST" name="Test003_validateHomePageIsLoaded" finished-at="2025-05-17T15:54:42 BST" duration-ms="58" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test003_validateHomePageIsLoaded -->
        <test-method signature="Test004_validateAddProductsToCart()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:42 BST" name="Test004_validateAddProductsToCart" finished-at="2025-05-17T15:54:44 BST" duration-ms="2054" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test004_validateAddProductsToCart -->
        <test-method signature="Test005_006_validateViewCart()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:44 BST" name="Test005_006_validateViewCart" finished-at="2025-05-17T15:54:45 BST" duration-ms="510" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test005_006_validateViewCart -->
        <test-method signature="Test007_validateProceedTOCheckOutWithoutLogin()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:45 BST" name="Test007_validateProceedTOCheckOutWithoutLogin" finished-at="2025-05-17T15:54:45 BST" duration-ms="330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test007_validateProceedTOCheckOutWithoutLogin -->
        <test-method signature="Test008_validateClickOnRegisterLogin()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:45 BST" name="Test008_validateClickOnRegisterLogin" finished-at="2025-05-17T15:54:46 BST" duration-ms="469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test008_validateClickOnRegisterLogin -->
        <test-method signature="Test009_validateSignUpAndCreateAccount()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:46 BST" name="Test009_validateSignUpAndCreateAccount" finished-at="2025-05-17T15:54:50 BST" duration-ms="4231" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test009_validateSignUpAndCreateAccount -->
        <test-method signature="Test010_validateAccountIsCreated()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:50 BST" name="Test010_validateAccountIsCreated" finished-at="2025-05-17T15:54:57 BST" duration-ms="6804" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test010_validateAccountIsCreated -->
        <test-method signature="Test011_validateLoggedInUsername()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:57 BST" name="Test011_validateLoggedInUsername" finished-at="2025-05-17T15:54:57 BST" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test011_validateLoggedInUsername -->
        <test-method signature="Test012_validateClickOnCartButton()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:57 BST" name="Test012_validateClickOnCartButton" finished-at="2025-05-17T15:54:58 BST" duration-ms="1253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test012_validateClickOnCartButton -->
        <test-method signature="Test013_validateClickOnProceedToCheckButton()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:58 BST" name="Test013_validateClickOnProceedToCheckButton" finished-at="2025-05-17T15:54:59 BST" duration-ms="1129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test013_validateClickOnProceedToCheckButton -->
        <test-method signature="Test014_validateAddressDetailsAndReviewOrder()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:59 BST" name="Test014_validateAddressDetailsAndReviewOrder" finished-at="2025-05-17T15:54:59 BST" duration-ms="404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test014_validateAddressDetailsAndReviewOrder -->
        <test-method signature="Test015_validateEnterDescriptionAndPlaceOrder()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:54:59 BST" name="Test015_validateEnterDescriptionAndPlaceOrder" finished-at="2025-05-17T15:55:02 BST" duration-ms="2175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test015_validateEnterDescriptionAndPlaceOrder -->
        <test-method signature="Test016_017_018_validatePayConfirmAndSuccessOrder()[pri:0, instance:tests.Testcase1@35229f85]" started-at="2025-05-17T15:55:02 BST" name="Test016_017_018_validatePayConfirmAndSuccessOrder" finished-at="2025-05-17T15:55:05 BST" duration-ms="3220" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test016_017_018_validatePayConfirmAndSuccessOrder -->
      </class> <!-- tests.Testcase1 -->
      <class name="tests.SignupWithExcelTest">
        <test-method signature="Test020_signupWithExcelData()[pri:999, instance:tests.SignupWithExcelTest@2b4c1d96]" started-at="2025-05-17T15:55:05 BST" name="Test020_signupWithExcelData" depends-on-groups="coreTests" finished-at="2025-05-17T15:55:24 BST" duration-ms="19225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test020_signupWithExcelData -->
        <test-method signature="Test022_invalidLoginAfterLogout()[pri:1001, instance:tests.SignupWithExcelTest@2b4c1d96]" started-at="2025-05-17T15:55:24 BST" name="Test022_invalidLoginAfterLogout" finished-at="2025-05-17T15:55:29 BST" depends-on-methods="tests.SignupWithExcelTest.Test020_signupWithExcelData" duration-ms="4885" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test022_invalidLoginAfterLogout -->
        <test-method signature="Test023_validLoginAfterInvalidAttempt()[pri:1002, instance:tests.SignupWithExcelTest@2b4c1d96]" started-at="2025-05-17T15:55:29 BST" name="Test023_validLoginAfterInvalidAttempt" finished-at="2025-05-17T15:55:38 BST" depends-on-methods="tests.SignupWithExcelTest.Test022_invalidLoginAfterLogout" duration-ms="9492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test023_validLoginAfterInvalidAttempt -->
      </class> <!-- tests.SignupWithExcelTest -->
      <class name="tests.ProductListingTest">
        <test-method signature="Test030_verifyProductListingAndSearchFeatures()[pri:1003, instance:tests.ProductListingTest@12ed9db6]" started-at="2025-05-17T15:55:38 BST" name="Test030_verifyProductListingAndSearchFeatures" finished-at="2025-05-17T15:55:51 BST" depends-on-methods="tests.SignupWithExcelTest.Test023_validLoginAfterInvalidAttempt" duration-ms="12927" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test030_verifyProductListingAndSearchFeatures -->
      </class> <!-- tests.ProductListingTest -->
      <class name="tests.AccountDeletionTest">
        <test-method is-config="true" signature="browserSetUp()[pri:0, instance:tests.AccountDeletionTest@e54303]" started-at="2025-05-17T15:54:36 BST" name="browserSetUp" finished-at="2025-05-17T15:54:41 BST" duration-ms="4721" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- browserSetUp -->
        <test-method signature="Test034_validateAccountDeletionAndRedirect()[pri:1007, instance:tests.AccountDeletionTest@e54303]" started-at="2025-05-17T15:55:56 BST" name="Test034_validateAccountDeletionAndRedirect" finished-at="2025-05-17T15:56:05 BST" depends-on-methods="tests.SubscriptionTest.Test033_subscribeWithDuplicateEmail" duration-ms="8772" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test034_validateAccountDeletionAndRedirect -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.AccountDeletionTest@e54303]" started-at="2025-05-17T15:56:07 BST" name="tearDown" finished-at="2025-05-17T15:56:07 BST" duration-ms="512" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.AccountDeletionTest -->
      <class name="tests.ContactUsTest">
        <test-method signature="Test035_validateContactUsFormSubmission()[pri:1008, instance:tests.ContactUsTest@2df6226d]" started-at="2025-05-17T15:56:05 BST" name="Test035_validateContactUsFormSubmission" finished-at="2025-05-17T15:56:06 BST" depends-on-methods="tests.AccountDeletionTest.Test034_validateAccountDeletionAndRedirect" duration-ms="1377" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test035_validateContactUsFormSubmission -->
      </class> <!-- tests.ContactUsTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>




--------------------------------------------------------------------------------
FILE: target\surefire-reports\TestSuite.txt
--------------------------------------------------------------------------------

-------------------------------------------------------------------------------
Test set: TestSuite
-------------------------------------------------------------------------------
Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 92.09 s -- in TestSuite




--------------------------------------------------------------------------------
FILE: target\surefire-reports\junitreports\TEST-tests.AccountDeletionTest.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-R69UM7Q" failures="0" tests="1" name="tests.AccountDeletionTest" time="8.772" errors="0" timestamp="2025-05-17T15:56:08 BST" skipped="0">
  <testcase classname="tests.AccountDeletionTest" name="Test034_validateAccountDeletionAndRedirect" time="8.772"/>
</testsuite> <!-- tests.AccountDeletionTest -->




--------------------------------------------------------------------------------
FILE: target\surefire-reports\junitreports\TEST-tests.ContactUsTest.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-R69UM7Q" failures="0" tests="1" name="tests.ContactUsTest" time="1.377" errors="0" timestamp="2025-05-17T15:56:08 BST" skipped="0">
  <testcase classname="tests.ContactUsTest" name="Test035_validateContactUsFormSubmission" time="1.377"/>
</testsuite> <!-- tests.ContactUsTest -->




--------------------------------------------------------------------------------
FILE: target\surefire-reports\junitreports\TEST-tests.ProductListingTest.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-R69UM7Q" failures="0" tests="1" name="tests.ProductListingTest" time="12.927" errors="0" timestamp="2025-05-17T15:56:08 BST" skipped="0">
  <testcase classname="tests.ProductListingTest" name="Test030_verifyProductListingAndSearchFeatures" time="12.927"/>
</testsuite> <!-- tests.ProductListingTest -->




--------------------------------------------------------------------------------
FILE: target\surefire-reports\junitreports\TEST-tests.SignupWithExcelTest.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-R69UM7Q" failures="0" tests="3" name="tests.SignupWithExcelTest" time="33.602" errors="0" timestamp="2025-05-17T15:56:08 BST" skipped="0">
  <testcase classname="tests.SignupWithExcelTest" name="Test020_signupWithExcelData" time="19.225"/>
  <testcase classname="tests.SignupWithExcelTest" name="Test022_invalidLoginAfterLogout" time="4.885"/>
  <testcase classname="tests.SignupWithExcelTest" name="Test023_validLoginAfterInvalidAttempt" time="9.492"/>
</testsuite> <!-- tests.SignupWithExcelTest -->




--------------------------------------------------------------------------------
FILE: target\surefire-reports\junitreports\TEST-tests.SubscriptionTest.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-R69UM7Q" failures="0" tests="3" name="tests.SubscriptionTest" time="4.625" errors="0" timestamp="2025-05-17T15:56:08 BST" skipped="0">
  <testcase classname="tests.SubscriptionTest" name="Test031_subscribeWithValidEmail" time="0.211"/>
  <testcase classname="tests.SubscriptionTest" name="Test032_subscribeWithInvalidEmail" time="2.188"/>
  <testcase classname="tests.SubscriptionTest" name="Test033_subscribeWithDuplicateEmail" time="2.226"/>
</testsuite> <!-- tests.SubscriptionTest -->




--------------------------------------------------------------------------------
FILE: target\surefire-reports\junitreports\TEST-tests.Testcase1.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-R69UM7Q" failures="0" tests="15" name="tests.Testcase1" time="23.638" errors="0" timestamp="2025-05-17T15:56:08 BST" skipped="1">
  <testcase classname="tests.Testcase1" name="Test008_validateClickOnRegisterLogin" time="0.469"/>
  <testcase classname="tests.Testcase1" name="Test009_validateSignUpAndCreateAccount" time="4.231"/>
  <testcase classname="tests.Testcase1" name="Test003_validateHomePageIsLoaded" time="0.058"/>
  <testcase classname="tests.Testcase1" name="Test014_validateAddressDetailsAndReviewOrder" time="0.404"/>
  <testcase classname="tests.Testcase1" name="Test012_validateClickOnCartButton" time="1.253"/>
  <testcase classname="tests.Testcase1" name="Test011_validateLoggedInUsername" time="0.093"/>
  <testcase classname="tests.Testcase1" name="Test004_validateAddProductsToCart" time="2.054"/>
  <testcase classname="tests.Testcase1" name="Test005_006_validateViewCart" time="0.510"/>
  <testcase classname="tests.Testcase1" name="Test016_017_018_validatePayConfirmAndSuccessOrder" time="3.220"/>
  <testcase classname="tests.Testcase1" name="Test001_002_validateUserLandedOnProperBaseUrl" time="0.908"/>
  <testcase classname="tests.Testcase1" name="Test007_validateProceedTOCheckOutWithoutLogin" time="0.330"/>
  <testcase classname="tests.Testcase1" name="Test013_validateClickOnProceedToCheckButton" time="1.129"/>
  <testcase classname="tests.Testcase1" name="Test010_validateAccountIsCreated" time="6.804"/>
  <testcase classname="tests.Testcase1" name="Test015_validateEnterDescriptionAndPlaceOrder" time="2.175"/>
  <testcase classname="tests.Testcase1" name="Test999_forceScreenshotFailureForDemo">
    <skipped/>
  </testcase> <!-- Test999_forceScreenshotFailureForDemo -->
</testsuite> <!-- tests.Testcase1 -->




--------------------------------------------------------------------------------
FILE: target\surefire-reports\old\Surefire suite\Surefire test.properties
--------------------------------------------------------------------------------

[SuiteResult context=Surefire test]



--------------------------------------------------------------------------------
FILE: target\surefire-reports\Surefire suite\Surefire test.xml
--------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="13" hostname="DESKTOP-R69UM7Q" failures="0" tests="23" name="Surefire test" time="85.008" errors="0" timestamp="2025-05-17T15:56:06 BST">
  <testcase classname="tests.Testcase1" name="Test001_002_validateUserLandedOnProperBaseUrl" time="0.908"/>
  <testcase classname="tests.Testcase1" name="Test003_validateHomePageIsLoaded" time="0.058"/>
  <testcase classname="tests.Testcase1" name="Test004_validateAddProductsToCart" time="2.054"/>
  <testcase classname="tests.Testcase1" name="Test005_006_validateViewCart" time="0.51"/>
  <testcase classname="tests.Testcase1" name="Test007_validateProceedTOCheckOutWithoutLogin" time="0.33"/>
  <testcase classname="tests.Testcase1" name="Test008_validateClickOnRegisterLogin" time="0.469"/>
  <testcase classname="tests.Testcase1" name="Test009_validateSignUpAndCreateAccount" time="4.231"/>
  <testcase classname="tests.Testcase1" name="Test010_validateAccountIsCreated" time="6.804"/>
  <testcase classname="tests.Testcase1" name="Test011_validateLoggedInUsername" time="0.093"/>
  <testcase classname="tests.Testcase1" name="Test012_validateClickOnCartButton" time="1.253"/>
  <testcase classname="tests.Testcase1" name="Test013_validateClickOnProceedToCheckButton" time="1.129"/>
  <testcase classname="tests.Testcase1" name="Test014_validateAddressDetailsAndReviewOrder" time="0.404"/>
  <testcase classname="tests.Testcase1" name="Test015_validateEnterDescriptionAndPlaceOrder" time="2.175"/>
  <testcase classname="tests.Testcase1" name="Test016_017_018_validatePayConfirmAndSuccessOrder" time="3.22"/>
  <testcase classname="tests.SignupWithExcelTest" name="Test020_signupWithExcelData" time="19.225"/>
  <testcase classname="tests.SignupWithExcelTest" name="Test022_invalidLoginAfterLogout" time="4.885"/>
  <testcase classname="tests.SignupWithExcelTest" name="Test023_validLoginAfterInvalidAttempt" time="9.492"/>
  <testcase classname="tests.ProductListingTest" name="Test030_verifyProductListingAndSearchFeatures" time="12.927"/>
  <testcase classname="tests.SubscriptionTest" name="Test031_subscribeWithValidEmail" time="0.211"/>
  <testcase classname="tests.SubscriptionTest" name="Test032_subscribeWithInvalidEmail" time="2.188"/>
  <testcase classname="tests.SubscriptionTest" name="Test033_subscribeWithDuplicateEmail" time="2.226"/>
  <testcase classname="tests.AccountDeletionTest" name="Test034_validateAccountDeletionAndRedirect" time="8.772"/>
  <testcase classname="tests.ContactUsTest" name="Test035_validateContactUsFormSubmission" time="1.377"/>
  <testcase classname="tests.BaseTest" name="@AfterSuite tearDown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDown -->
  <testcase classname="tests.BaseTest" name="@BeforeSuite browserSetUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite browserSetUp -->
  <testcase classname="tests.BaseTest" name="@BeforeSuite browserSetUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite browserSetUp -->
  <testcase classname="tests.BaseTest" name="@BeforeSuite browserSetUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite browserSetUp -->
  <testcase classname="tests.BaseTest" name="@BeforeSuite browserSetUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite browserSetUp -->
  <testcase classname="tests.BaseTest" name="@BeforeSuite browserSetUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite browserSetUp -->
  <testcase classname="tests.BaseTest" name="@AfterSuite tearDown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDown -->
  <testcase classname="tests.BaseTest" name="@AfterSuite tearDown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDown -->
  <testcase classname="tests.BaseTest" name="@AfterSuite tearDown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDown -->
  <testcase classname="tests.BaseTest" name="@BeforeSuite browserSetUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite browserSetUp -->
  <testcase classname="tests.Testcase1" name="Test999_forceScreenshotFailureForDemo" time="0.0">
    <ignored/>
  </testcase> <!-- Test999_forceScreenshotFailureForDemo -->
  <testcase classname="tests.BaseTest" name="@AfterSuite tearDown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDown -->
  <testcase classname="tests.BaseTest" name="@AfterSuite tearDown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDown -->
</testsuite> <!-- Surefire test -->



